{"meta":{"title":"矮子高-博客","subtitle":"个人博客","description":"前端,js,html,css3,数字图像处理,angular,typescript,开发,程序员","author":"矮子高","url":"http://aizigao.xyz","root":"/"},"pages":[{"title":"标签","date":"2023-08-18T05:53:06.882Z","updated":"2023-08-18T05:53:06.882Z","comments":false,"path":"tags/index.html","permalink":"http://aizigao.xyz/tags/index.html","excerpt":"","text":""},{"title":"分类","date":"2023-08-18T05:53:01.214Z","updated":"2023-08-18T05:53:01.214Z","comments":false,"path":"categories/index.html","permalink":"http://aizigao.xyz/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"移动端调试工具个人小结","slug":"移动端调试工具个人小结","date":"2021-04-08T13:25:05.000Z","updated":"2023-08-18T02:07:53.695Z","comments":true,"path":"2021/04/08/移动端调试工具个人小结/","link":"","permalink":"http://aizigao.xyz/2021/04/08/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7%E4%B8%AA%E4%BA%BA%E5%B0%8F%E7%BB%93/","excerpt":"","text":"背景在 PC 上我们调试的话用 chrome 自带的 devtool 就可以，在移动端的方案就不是很好搞了，所以在这里记录一下。 1. 添加 console 控制台输出在移动web中，添加控制台输出的话，主要有两个工具 vConsole 和 eruda 我个人更喜欢eruda，工具更全一些 vConsole基本使用 1234&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vconsole/dist/vconsole.min.js&quot;&gt;&lt;/script&gt;&lt;script&gt; var vConsole = new VConsole();&lt;/script&gt; eruda基本使用 12&lt;script src=&quot;https://cdn.jsdelivr.net/npm/eruda/eruda.min.js&quot;&gt;&lt;/script&gt;&lt;script&gt;eruda.init();&lt;/script&gt; eruda 在 iOS 的 UIWebView 内击点会不流畅，主要用是 shadowdom 的原因, 可以按以下方案引入 1234567891011121314151617181920212223242526272829303132333435363738var load = function (src, cb) &#123; var scriptEle = document.createElement(&quot;script&quot;); scriptEle.setAttribute(&quot;src&quot;, src); scriptEle.addEventListener(&quot;load&quot;, function () &#123; cb(); &#125;); cb != null &amp;&amp; scriptEle.addEventListener(&quot;error&quot;, cb); document.body.appendChild(scriptEle); return scriptEle;&#125;;var loadEruda = function () &#123; var loaded = false; var isSafari = (navigator.vendor &amp;&amp; navigator.vendor.indexOf(&quot;Apple&quot;) &gt; -1 &amp;&amp; navigator.userAgent &amp;&amp; !navigator.userAgent.match(&quot;CriOS&quot;)) || /^((?!chrome|android).)*safari/i.test(navigator.userAgent); var isUiWebView = isSafari &amp;&amp; !(window.webkit &amp;&amp; window.webkit.messageHandlers); load(&quot;https://cdn.jsdelivr.net/npm/eruda@2.3.3/eruda.min.js&quot;, function (err) &#123; if (err) &#123; return; &#125; if (isUiWebView) &#123; var el = document.createElement(&quot;div&quot;); document.body.appendChild(el); eruda.init(&#123; container: el, useShadowDom: false, &#125;); &#125; else &#123; eruda.init(); &#125; &#125;);&#125;; 2. 代理到本地, 远程调试之前的开发项目时，大家一定都有用过 charles 或者 finder 抓过包的经验，在这几年新推出的如 spy-debugger 和 whistle 现在整合了抓包功能的同时也有代理的能力, charles 和 nginx 也可以代理，就是配置起来麻烦, 日常开发中我已经很少用了。线上出现问题后可以代理到本地调试无疑是最快的方式。 HTTP 代理HTTP 代理大家应该都有用过 charles 的 proxy 功能，但是我现在用的更多是 whistle, 它提供功能很多，我下面都以 不走 HTTP 代理上述的 charles, finder, whistle 等都是走的 HTTP 代理方式，在一些 APP 中，为了安全起见是不会生效的, 如支付宝，银联APP，各大银行 APP 等。 3. 其它抓包工具- 4. 云真机调试平台代理类方式 charles spy-debugger whistle 真机 debug 线上 – 清理缓存 x5 debugx5.qq.com irma 磨刀石 react-native-debugger 代理与mock数据 android 下 root 后安装面具，改host, 安装系统证书 改不了hosts, 如ios, 本地起dns服务器 走起dns改路由表 genymotion – google-store&#x2F;x86&#x2F;transform&#x2F;代理&#x2F;adb&#x2F;hosts TBS Studio X5 Blink 内核判断 | ios | android 微信校验是会暂存的 其它 chrome-dev-tools","categories":[],"tags":[]},{"title":"个人面试用的思维导图备份","slug":"个人面试用的思维导图备份","date":"2020-12-25T14:48:15.000Z","updated":"2023-08-18T02:07:53.221Z","comments":true,"path":"2020/12/25/个人面试用的思维导图备份/","link":"","permalink":"http://aizigao.xyz/2020/12/25/%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95%E7%94%A8%E7%9A%84%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE%E5%A4%87%E4%BB%BD/","excerpt":"","text":"说明面试用的思维导图，总结一些知识点, 由百度脑图制做, 太大了，右键新页面打开吧 http-缓存 设计模式 前端测试框架对比 未完待续 本博客持续修改与更新中，点击这里查看最新的内容","categories":[],"tags":[]},{"title":"在iconfont上字体链接中获取图标svg文件(python)","slug":"在iconfont上字体链接中获取图标svg文件","date":"2020-07-23T13:08:14.000Z","updated":"2023-08-18T02:07:53.310Z","comments":true,"path":"2020/07/23/在iconfont上字体链接中获取图标svg文件/","link":"","permalink":"http://aizigao.xyz/2020/07/23/%E5%9C%A8iconfont%E4%B8%8A%E5%AD%97%E4%BD%93%E9%93%BE%E6%8E%A5%E4%B8%AD%E8%8E%B7%E5%8F%96%E5%9B%BE%E6%A0%87svg%E6%96%87%E4%BB%B6/","excerpt":"","text":"前言现在国内越来越多的网站开始用Iconfont-阿里巴巴矢量图标库 管理图标. 使用svg或者font图标，这种方式确实很方便并且大大减小了前端开发一部分工作量，当我看到一个网站用了iconfont的图标，并且我非常钟意它的设计时，我就有种想要获取一份它们原始svg文件的冲动，在我尝试一番后，终于让我总结了一波如何快速操作的方法。 分析打开iconfont.cn, 我建了一个测试项目,里面两个图标 可以看到它提供了三个文件格式 Unicode123456789@font-face &#123; font-family: &#x27;iconfont&#x27;; /* project id 1760743 */ src: url(&#x27;//at.alicdn.com/t/font_1760743_cqc31zkvkvd.eot&#x27;); src: url(&#x27;//at.alicdn.com/t/font_1760743_cqc31zkvkvd.eot?#iefix&#x27;) format(&#x27;embedded-opentype&#x27;), url(&#x27;//at.alicdn.com/t/font_1760743_cqc31zkvkvd.woff2&#x27;) format(&#x27;woff2&#x27;), url(&#x27;//at.alicdn.com/t/font_1760743_cqc31zkvkvd.woff&#x27;) format(&#x27;woff&#x27;), url(&#x27;//at.alicdn.com/t/font_1760743_cqc31zkvkvd.ttf&#x27;) format(&#x27;truetype&#x27;), url(&#x27;//at.alicdn.com/t/font_1760743_cqc31zkvkvd.svg#iconfont&#x27;) format(&#x27;svg&#x27;);&#125; font Css 1//at.alicdn.com/t/font_1760743_cqc31zkvkvd.css symbols 格式 1//at.alicdn.com/t/font_1760743_cqc31zkvkvd.js 从上面看，每个项目都有唯一值是 1760743_cqc31zkvkvd ，只有获取这个字段就可以下载到对应的, Unicode下的ttf&#x2F;woff之类的字体，fontcss的css文件及 symbols, 我这次的目标是导出svg, 感觉symbols格式是最简单的。 如上面的例子中，对应的symbols内容对应的js文件 可以看到el=&#39;&lt;svg=....&gt;&#39;里的就是我们需要的svg, 复制格式化一下,内容为一个svg文件，内部有两个symbol 1234567891011121314&lt;svg&gt; &lt;symbol id=&quot;icon-fail&quot; viewBox=&quot;0 0 1024 1024&quot;&gt; &lt;path d=&quot;M512 0C228.69504 0 0 228.69504 0 512s228.69504 512 512 512 512-228.69504 512-512S795.30496 0 512 0zM362.67008 332.36992c7.68 0 15.36 2.98496 21.32992 8.96l130.56 126.1568 130.56-126.1568c5.97504-5.97504 13.64992-8.53504 21.32992-8.32 7.68 0.21504 15.36512 3.2 21.34016 8.32 11.94496 11.94496 11.94496 30.72 0 42.67008l-129.8176 125.44 129.8176 125.44c11.94496 11.94496 11.94496 30.72 0 42.67008-11.94496 11.94496-30.72 11.94496-42.67008 0l-130.56-126.1568-130.56 126.1568c-11.94496 11.94496-30.72 11.94496-42.67008 0-11.94496-11.94496-11.94496-30.72 0-42.67008l129.8176-125.44L341.32992 384c-11.94496-11.94496-11.94496-30.72 0-42.67008a30.09024 30.09024 0 0 1 21.34016-8.96z&quot; fill=&quot;#FF4D29&quot; &gt;&lt;/path&gt; &lt;/symbol&gt; &lt;symbol id=&quot;icon-waitting-copy&quot; viewBox=&quot;0 0 1024 1024&quot;&gt; &lt;path d=&quot;M512 0C229.23776 0 0 229.23776 0 512s229.23776 512 512 512 512-229.23776 512-512S794.76224 0 512 0z m-16.07168 225.8944a34.13504 34.13504 0 0 1 33.14176 34.11456v286.12096H819.2A34.13504 34.13504 0 0 1 819.2 614.4H494.92992a34.13504 34.13504 0 0 1-33.4592-40.66816 34.13504 34.13504 0 0 1-0.67072-6.52288v-307.2a34.13504 34.13504 0 0 1 35.12832-34.11968z&quot; fill=&quot;#FF8000&quot; &gt;&lt;/path&gt; &lt;/symbol&gt;&lt;/svg&gt; symbol转为svg,其它只要替换symbol为svg 就好了，再删除原来的最外部的&lt;svg&gt;&lt;/svg&gt;就可以了，如： 123456789101112&lt;svg id=&quot;icon-fail&quot; viewBox=&quot;0 0 1024 1024&quot;&gt;&lt;path d=&quot;M512 0C228.69504 0 0 228.69504 0 512s228.69504 512 512 512 512-228.69504 512-512S795.30496 0 512 0zM362.67008 332.36992c7.68 0 15.36 2.98496 21.32992 8.96l130.56 126.1568 130.56-126.1568c5.97504-5.97504 13.64992-8.53504 21.32992-8.32 7.68 0.21504 15.36512 3.2 21.34016 8.32 11.94496 11.94496 11.94496 30.72 0 42.67008l-129.8176 125.44 129.8176 125.44c11.94496 11.94496 11.94496 30.72 0 42.67008-11.94496 11.94496-30.72 11.94496-42.67008 0l-130.56-126.1568-130.56 126.1568c-11.94496 11.94496-30.72 11.94496-42.67008 0-11.94496-11.94496-11.94496-30.72 0-42.67008l129.8176-125.44L341.32992 384c-11.94496-11.94496-11.94496-30.72 0-42.67008a30.09024 30.09024 0 0 1 21.34016-8.96z&quot; fill=&quot;#FF4D29&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;svg id=&quot;icon-waitting-copy&quot; viewBox=&quot;0 0 1024 1024&quot;&gt;&lt;path d=&quot;M512 0C229.23776 0 0 229.23776 0 512s229.23776 512 512 512 512-229.23776 512-512S794.76224 0 512 0z m-16.07168 225.8944a34.13504 34.13504 0 0 1 33.14176 34.11456v286.12096H819.2A34.13504 34.13504 0 0 1 819.2 614.4H494.92992a34.13504 34.13504 0 0 1-33.4592-40.66816 34.13504 34.13504 0 0 1-0.67072-6.52288v-307.2a34.13504 34.13504 0 0 1 35.12832-34.11968z&quot; fill=&quot;#FF8000&quot;&gt;&lt;/path&gt;&lt;/svg&gt; 之后就是将svg取出，取到每个svg的id属性做为文件名写入对应文件里就好了，这一块可以写一个脚本处理。 简化流程可以看到整个过程比较通用，我这里写了个python脚本处理一下 123456789101112131415161718192021222324252627282930313233343536373839404142434445import osimport shutilimport reimport requests # 自行安装import sysdef get_svgs_from_js_link(fileLink): # -- 获取内容 file_content = str(requests.get(fileLink).content) # --- 从js中获取svg内容 svg_str_regex = r&quot;\\&lt;svg\\&gt;(.*?)\\&lt;\\/svg\\&gt;&quot; matches = re.findall(svg_str_regex, file_content) # 有svg时 if len(matches): svg_str = re.sub(r&#x27;symbol&#x27;, &#x27;svg&#x27;, matches[0]) svg_str = re.sub(&#x27;&lt;/svg&gt;&#x27;, &#x27;&lt;/svg&gt;@@@&#x27;, svg_str) svg_list = svg_str.split(&#x27;@@@&#x27;) # 清理dist if os.path.exists(&#x27;./dist&#x27;): shutil.rmtree(&quot;./dist&quot;) os.mkdir(&#x27;./dist&#x27;) for svgContent in svg_list: if svgContent: fileName = re.findall(r&#x27;id=\\&quot;(.*?)\\&quot;&#x27;, svgContent)[0] print(&#x27;写入icon %s&#x27; % fileName) f = open(&quot;./dist/%s.svg&quot; % fileName, &quot;a&quot;) f.write(svgContent) f.close() print(&#x27;搞定啦!!!&#x27;)if __name__ == &quot;__main__&quot;: if len(sys.argv) &lt; 2: print(&#x27;使用方式如: \\n python3 ./icon_symbol_to_svg http://at.alicdn.com/t/font_1760743_cqc31zkvkvd.js&#x27;) else: get_svgs_from_js_link(sys.argv[1]) 运行 1python3 ./icon_symbol_to_svg http://at.alicdn.com/t/font_1760743_cqc31zkvkvd.js 然后你在dist文件下你可以看到所有的svg了 后记 写了脚本后方便了很多，细节就不考虑了，能用就行; python脚本简简写写还是比node方便一点, 不带node_module走比较方便，下次试试deno版本的。 本博客持续修改与更新中，点击这里查看最新的内容","categories":[],"tags":[{"name":"脚本","slug":"脚本","permalink":"http://aizigao.xyz/tags/%E8%84%9A%E6%9C%AC/"},{"name":"python","slug":"python","permalink":"http://aizigao.xyz/tags/python/"}]},{"title":"JS中枚举类型个人处理方式(BraketEnum)","slug":"JS中枚举类型个人处理方式","date":"2020-06-03T12:56:08.000Z","updated":"2023-08-18T02:07:53.111Z","comments":true,"path":"2020/06/03/JS中枚举类型个人处理方式/","link":"","permalink":"http://aizigao.xyz/2020/06/03/JS%E4%B8%AD%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%9E%8B%E4%B8%AA%E4%BA%BA%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F/","excerpt":"","text":"背景众所周知JS中没有枚举类型，TS是有的，但是也不是很好用； 在我们日常开发中mysql的 Enums 类型大概率也是没有人用的，原因是添加一个enum需要 Alter 整张表，以至于到我们前端这边，获取到的 state, status 啥的永远是 0,1,2,3,4,5 这样的数字，如果不对这些 enum 进行处理，在代码就会出现一堆的如下面的代码： 1234567&#123;state === 1 &amp;&amp; ( &lt;div&gt;xxxx&lt;/div&gt;)&#125;if (state===1) &#123; // ---&#125; 已我浅薄的经验来看，像上面的这个样子的代码，你维护个一段时间，也就看不懂了.jpg 。。。 TS中的Enums现在大家都开始用TS了，在 TS 中的 enum 两种模式，一种是数字，一种是 map 结构。 数字 123456789enum Direction &#123; Up = 1, Down, Left, Right,&#125;console.log(Direction.Up) // 0console.log(Direction[0]) // &quot;Up&quot; 相当于下面,见demo (注：ts官方的这个 try, 先关闭 adb 或 ublock 广告插件) 1234567var Direction;(function (Direction) &#123; Direction[Direction[&quot;Up&quot;] = 1] = &quot;Up&quot;; Direction[Direction[&quot;Down&quot;] = 2] = &quot;Down&quot;; Direction[Direction[&quot;Left&quot;] = 3] = &quot;Left&quot;; Direction[Direction[&quot;Right&quot;] = 4] = &quot;Right&quot;;&#125;)(Direction || (Direction = &#123;&#125;)); map 123456enum Direction &#123; Up = &quot;UP&quot;, Down = &quot;DOWN&quot;, Left = &quot;LEFT&quot;, Right = &quot;RIGHT&quot;,&#125; 相当于demo 12345678&quot;use strict&quot;;var Direction;(function (Direction) &#123; Direction[&quot;Up&quot;] = &quot;UP&quot;; Direction[&quot;Down&quot;] = &quot;DOWN&quot;; Direction[&quot;Left&quot;] = &quot;LEFT&quot;; Direction[&quot;Right&quot;] = &quot;RIGHT&quot;;&#125;)(Direction || (Direction = &#123;&#125;)); 我们想想我们日常使用 enum 的地方: 做条件判断, 不同条件下执行不到代码 在 select 或者其它地方做为 label 和 value，并且需要按一定顺序 … 在我看来 TS 中的 enum 并不能满足我的需求, 下面我们看下后台java 的定义方式。 JAVA 中的Enums12345public enum StateEnum &#123; &#x27;AUDIT_WAIT&#x27;, (1, &#x27;审核中&#x27;), &#x27;AUDIT_PASS&#x27;, (2, &#x27;审核通过&#x27;) // ...&#125; 由我们可以看到 Java 中大致是下面的方式定义enums的: 1code, value, desc 结构也是比较清晰，那么我们也能按上面的结构仿制一个我们自已的 enum 了。 个人解决方案对于日常开发中，你可以会直接到 Object 创建，如下: 1234const StateEnum = &#123; &#x27;AUDIT_WAIT&#x27;: [1, &#x27;审核中&#x27;] &#x27;AUDIT_PASS&#x27;: [2, &#x27;审核通过&#x27;]&#125; 但是要说的是，Object 本身在遍历的时候有特殊顺序的，可以在这篇文章里看到具体的说明, 也就是说不能按我们在代码中书写的顺序遍历；而在我们日常开发经常要干的一件事就是遍历它，生成一个下拉的 Select，所以Object 真的不适合，好在 ES6 里的 Map 就是有索引又有顺序的好东西，所以我用 Map 为基础加一个自已的包。 1234const StateEnum = new Map([ [&#x27;AUDIT_WAIT&#x27;, [1, &#x27;审核中&#x27;, &#x27;extra&#x27;]] [&#x27;AUDIT_PASS&#x27;, [2, &#x27;审核通过&#x27;, &#x27;extra&#x27;]]]) BracketEnum我将我的想法做成了一个小的 npm 包， 我叫它 BracketEnum, 由于 Typescript 的泛型支持，在 VSCode 下体验良好。 如果要看定义话，鼠标移上去就能见到 安装 1yarn add bracket-enum 定义一个Enum 123456789101112131415import &#123; BracketEnum &#125; from &#x27;bracket-enum&#x27;const STATUS = BracketEnum.of([// [CODE, [VALUE, DESC, EXTR]][&#x27;AUDIT_WAIT&#x27;, [1, &#x27;审核中&#x27;, &#x27;extra1&#x27;]],[&#x27;AUDIT_PASS&#x27;, [2, &#x27;审核通过&#x27;, &#x27;extra2&#x27;]],]);// --- 或者const STATUS_2 = new BracketEnum([// [CODE, [VALUE, DESC, EXTR]][&#x27;AUDIT_WAIT&#x27;, [1, &#x27;审核中&#x27;, &#x27;extra1&#x27;]],[&#x27;AUDIT_PASS&#x27;, [2, &#x27;审核通过&#x27;, &#x27;extra2&#x27;]],]); 推荐使用 BreacketEnum.of 方式创建, 容易忘记写 new 基本使用 12345678910111213141516171819// 由 code 得到 valueSTATUS.getValueByCode(&#x27;AUDIT_PASS&#x27;) // 2// 由 code 得到 descSTATUS.getDescByCode(&#x27;AUDIT_WAIT&#x27;) //&#x27;审核中&#x27;// 由 value 得到 descSTATUS.getDescByValue(2) // &#x27;审核通过&#x27;// 由 value 得到 extraSTATUS.getDescByExtra(2) // extra2// 获取 所有 valueSTATUS.getAllValues() // [1, 2] 拿到数组，可以用于遍历生成// 判断 当前是 pass 状态const currentState = 2STATUS.checkValueByCode(&#x27;AUDIT_PASS&#x27;, currentState) // true 扩展 因为这个小玩意代码也没有什么内容，本身用 class 构建，如果要自已添加一个对应的处理方法也很简单 1234567// 扩展class myEnums extends Dtnums&#123; // ---&#125;new myEnums([])myEnums.of([]) 比我因为经常用 antd, 所以把生成 antd 里 Select 需要用的 Options 结构内置了, 你如果需要定义话，可以按下面的方式 12345678910111213141516171819202122232425262728class myEnums extends Dtnums&#123; toMyFormOptions(hasAll: boolean = false): any[] &#123; const allOption = &#123; key: null, value: null, label: &#x27;全部&#x27;, extra: null, &#125;; // eslint-disable-next-line @typescript-eslint/no-unused-vars const result = this.configList.map(([code, [value, desc, extra]]) =&gt; &#123; return &#123; key: value, value, label: desc, extra, &#125;; &#125;); if (hasAll) &#123; return [allOption, ...result]; &#125; return result; &#125;&#125;// 初始化；myEnums.of([]) 其它内置的方法 toFormOptions([hasAll:Boolean]) 生成 antd 的 options toFormValueEnum 转为antd pro table 需要的ValueEnum 本博客持续修改与更新中，点击这里查看最新的内容","categories":[],"tags":[{"name":"js","slug":"js","permalink":"http://aizigao.xyz/tags/js/"}]},{"title":"nginx_个人常用功能记录一下","slug":"nginx-个人常用功能记录一下","date":"2020-05-23T06:41:22.000Z","updated":"2023-08-18T02:07:53.140Z","comments":true,"path":"2020/05/23/nginx-个人常用功能记录一下/","link":"","permalink":"http://aizigao.xyz/2020/05/23/nginx-%E4%B8%AA%E4%BA%BA%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B/","excerpt":"","text":"Nginx的三大主要功能 静态web服务器 反向代理 负载均衡 location12345~ 波浪线表示执行一个正则匹配，区分大小写~* 表示执行一个正则匹配，不区分大小写^~ ^~表示普通字符匹配，如果该选项匹配，只匹配该选项，不匹配别的选项，一般用来匹配目录= 进行普通字符精确匹配@ &quot;@&quot; 定义一个命名的 location，@定义的locaiton名字一般用在内部定向，例如error_page, try_files命令中。它的功能类似于编程中的goto。 优先级 1= &gt; ~^ &gt; ~ = ~* &gt;最长前缀匹配 &gt; / ** @ 命名空间 ** 123456location /images &#123; try_files $uri $uri/ @name;&#125;location @name &#123; ...&#125; UpStream1234567891011121314upstream backend &#123; server backend1.example.com weight=5; server backend2.example.com:8080; server unix:/tmp/backend3; server backup1.example.com:8080 backup; server backup2.example.com:8080 backup;&#125;server &#123; location / &#123; proxy_pass http://backend; &#125;&#125; break作用域：server,location,if 停止执行当前虚拟主机的后续rewrite指令集break指令实例： 1234if ($slow) &#123; limit_rate 10k; break;&#125; if支持if条件判断，但不支持else 一个变量名；false如果这个变量是空字符串或者以0开始的字符串； 使用&#x3D; ,!&#x3D; 比较的一个变量和字符串 是用~， ~*与正则表达式匹配的变量，如果这个正则表达式中包含}，;则整个表达式需要用” 或’ 包围 使用-f ，!-f 检查一个文件是否存在 使用-d, !-d 检查一个目录是否存在 使用-e ，!-e 检查一个文件、目录、符号链接是否存在 使用-x ， !-x 检查一个文件是否可执行 12345678910111213141516171819if ($http_user_agent ~ MSIE) &#123; rewrite ^(.*)$ /msie/$1 break;&#125;if ($http_cookie ~* &quot;id=([^;]+)(?:;|$)&quot;) &#123; set $id $1;&#125;if ($request_method = POST) &#123; return 405;&#125;if ($slow) &#123; limit_rate 10k;&#125;if ($invalid_referer) &#123; return 403;&#125; return停止处理并返回指定状态码(code)给客户端。非标准状态码444表示关闭连接且不给客户端发响应头。从0.8.42版本起，return 支持响应URL重定向(对于301，302，303，307），或者文本响应(对于其他状态码). rewrite1rewrite regex replacement [flag]; flag: last 停止处理后续rewrite指令集，然后对当前重写的新URI在rewrite指令集上重新查找。 break 停止处理后续rewrite指令集，并不在重新查找,但是当前location内剩余非rewrite语句和location外的的非rewrite语句可以执行。 redirect 如果replacement不是以http:&#x2F;&#x2F; 或https:&#x2F;&#x2F;开始，返回302临时重定向 permant 返回301永久重定向 作用域：server,location,if 1234567server &#123; ... rewrite ^(/download/.*)/media/(.*)..*$ $1/mp3/$2.mp3 last; rewrite ^(/download/.*)/audio/(.*)..*$ $1/mp3/$2.ra last; return 403; ...&#125; 反向代理123456789server &#123; listen 80; server_name www.nginx.cn nginx.cn; location /app &#123; proxy_pass http://127.0.0.1:8080; &#125;&#125; 强制https123if ($**http_x_forwarded_proto** = &quot;http&quot;) &#123; return 301 https://$server_name$request_uri;&#125; 本博客持续修改与更新中，点击这里查看最新的内容","categories":[],"tags":[]},{"title":"看完了贝赛尔函数wiki,我终于看懂了","slug":"看完了贝赛尔函数wiki-我终于理解这玩意了","date":"2020-04-23T06:25:44.000Z","updated":"2023-08-18T02:07:53.621Z","comments":true,"path":"2020/04/23/看完了贝赛尔函数wiki-我终于理解这玩意了/","link":"","permalink":"http://aizigao.xyz/2020/04/23/%E7%9C%8B%E5%AE%8C%E4%BA%86%E8%B4%9D%E8%B5%9B%E5%B0%94%E5%87%BD%E6%95%B0wiki-%E6%88%91%E7%BB%88%E4%BA%8E%E7%90%86%E8%A7%A3%E8%BF%99%E7%8E%A9%E6%84%8F%E4%BA%86/","excerpt":"","text":"背景在平时写动画时我们总会使用一些缓动函数，我个人有时会 easing-js 抄抄算法，或者 ceaser 还有 cubic-bezier下调节一下控制点，拿到一个贝赛尔曲线的配置。然而我却一实不是很懂贝赛尔函数这个控制点，直到看了一下wiki… wiki我们打开 贝赛尔函数wiki, 可以看到一堆的动图, 如下我copy了一份作为记录： 从上面的图，我们可以有所感觉了，原来这几个控制写的是点移动的趋势啊， 瞬间感觉还是wiki好使，但仅仅限于英文 wiki, 之前看中文的 wiki 就没有这些内容了。然后对wiki上的具体实现公式我就懒得看了，我只要知道这个控制点是啥意思就够了，存下这几张图足够使用了, 具体还是看看 wiki 。 具体公式实现TODO: 之后有时间再试试 参考 Bézier_curve 本博客持续修改与更新中，点击这里查看最新的内容","categories":[],"tags":[{"name":"css","slug":"css","permalink":"http://aizigao.xyz/tags/css/"},{"name":"动画","slug":"动画","permalink":"http://aizigao.xyz/tags/%E5%8A%A8%E7%94%BB/"}]},{"title":"看完这张图后，我终于记住了chmod的数值了(标志位与掩码的操作)","slug":"看完这张图后，我终于记住了chmod的数值了_标志位与掩码的操作","date":"2020-04-01T06:26:56.000Z","updated":"2023-08-18T02:07:53.667Z","comments":true,"path":"2020/04/01/看完这张图后，我终于记住了chmod的数值了_标志位与掩码的操作/","link":"","permalink":"http://aizigao.xyz/2020/04/01/%E7%9C%8B%E5%AE%8C%E8%BF%99%E5%BC%A0%E5%9B%BE%E5%90%8E%EF%BC%8C%E6%88%91%E7%BB%88%E4%BA%8E%E8%AE%B0%E4%BD%8F%E4%BA%86chmod%E7%9A%84%E6%95%B0%E5%80%BC%E4%BA%86_%E6%A0%87%E5%BF%97%E4%BD%8D%E4%B8%8E%E6%8E%A9%E7%A0%81%E7%9A%84%E6%93%8D%E4%BD%9C/","excerpt":"","text":"简述Linux chmod（英文全拼：change mode）命令是控制用户对文件的权限的命令, 一般我们写 sudo chmod 777 时对应的是对文件所有者（Owner）、用户组（Group）、其它用户（Other Users）都加上读, 写和执行的权限。 我们知道读，写，执行 对应的具体数值是 4，2，1, 但是这几个数值点我一直是记不住的，好在可以写sudo chmod +wr之类的，直到我翻看了下 wiki, 看到了这样一张表 # Permission rwx Binary 7 read, write and execute rwx 111 6 read and write rw- 110 5 read and execute r-x 101 4 read only r– 100 3 write and execute -wx 011 2 write only -w- 010 1 execute only –x 001 0 none — 000 懂了，421都是对应的二进制表示上的 1&#x2F;0，1为开，0为关闭，极为清晰。然后也翻阅了一下 mdn 的 按位操作符, 学习了下标志位与掩码的操作。 标志位与掩码的操作下面的例子来自MDN 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253var FLAG_A = 0b0001; // 0001 antvar FLAG_B = 0b0010; // 0010 batvar FLAG_C = 0b0100; // 0100 catvar FLAG_D = 0b1000; // 1000 duckvar mask = FLAG_A | FLAG_B | FLAG_D; // 0001 | 0010 | 1000 =&gt; 1011var flags = 0b001// 如果我们有 catif (flags &amp; FLAG_C) &#123; // 0101 &amp; 0100 =&gt; 0100 =&gt; true // do stuff&#125;// 如果我们有 bat 或者 cat 至少一个// (0101 &amp; 0010) || (0101 &amp; 0100) =&gt; 0000 || 0100 =&gt; trueif ((flags &amp; FLAG_B) || (flags &amp; FLAG_C)) &#123; // do stuff&#125;// 如果我们有 bat 或者 cat 至少一个var mask = FLAG_B | FLAG_C; // 0010 | 0100 =&gt; 0110if (flags &amp; mask) &#123; // 0101 &amp; 0110 =&gt; 0100 =&gt; true // do stuff&#125;// 我们有 cat 和 duckvar mask = FLAG_C | FLAG_D; // 0100 | 1000 =&gt; 1100flags |= mask; // 0101 | 1100 =&gt; 1101// 我们没有 ant 也没有 catvar mask = ~(FLAG_A | FLAG_C); // ~0101 =&gt; 1010flags &amp;= mask; // 1101 &amp; 1010 =&gt; 1000// 我们没有 ant 也没有 catvar mask = ~FLAG_A &amp; ~FLAG_C;flags &amp;= mask; // 1101 &amp; 1010 =&gt; 1000// 如果我们以前没有 bat ，那么我们现在有 bat// 但是如果我们已经有了一个，那么现在没有了// 对 cat 也是相同的情况var mask = FLAG_B | FLAG_C;flags = flags ^ mask; // 1100 ^ 0110 =&gt; 1010// entering parallel universe...flags = ~flags; // ~1010 =&gt; 0101 这样大大的简化比较，在React也大量使用这种方式； 本博客持续修改与更新中，点击这里查看最新的内容","categories":[],"tags":[{"name":"个人笔记","slug":"个人笔记","permalink":"http://aizigao.xyz/tags/%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/"}]},{"title":"配置nginx-sourceMap只供内网访问","slug":"配置nginx-sourceMap只供内网访问","date":"2020-03-25T14:03:27.000Z","updated":"2023-08-18T02:07:53.774Z","comments":true,"path":"2020/03/25/配置nginx-sourceMap只供内网访问/","link":"","permalink":"http://aizigao.xyz/2020/03/25/%E9%85%8D%E7%BD%AEnginx-sourceMap%E5%8F%AA%E4%BE%9B%E5%86%85%E7%BD%91%E8%AE%BF%E9%97%AE/","excerpt":"","text":"背景最近一直研究部署 Sentry.io 的本地化部署，处理了几个小时，现在终于可以在我司的CICD平台里实现上传SourceMap了. 但是总觉得让别人直接看到我们的 sourceMap 不是很安全的样子，于日究竟了一下在 nginx 里限制只在我们局域网内看 SouceMap 的方式. 做法方式来自 https://docs.fundebug.com/notifier/javascript/sourcemap/download.html, 打开 etc/nginx 加入下面这句 12345678910location ~ ^/dist/(.+)\\.map$ &#123; allow 120.77.xx.xxx; # 局域网ip deny all; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $remote_addr; proxy_set_header Host $host; proxy_pass http://xxx.xxx.xx.xxx:8000; # 代理地址&#125;","categories":[],"tags":[{"name":"个人笔记","slug":"个人笔记","permalink":"http://aizigao.xyz/tags/%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/"},{"name":"nginx","slug":"nginx","permalink":"http://aizigao.xyz/tags/nginx/"}]},{"title":"个人笔记，英语中的介词","slug":"个人笔记，英语中的介词","date":"2020-03-23T06:30:43.000Z","updated":"2023-08-18T02:07:53.193Z","comments":true,"path":"2020/03/23/个人笔记，英语中的介词/","link":"","permalink":"http://aizigao.xyz/2020/03/23/%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0%EF%BC%8C%E8%8B%B1%E8%AF%AD%E4%B8%AD%E7%9A%84%E4%BB%8B%E8%AF%8D/","excerpt":"","text":"各样图片.jpg 本博客持续修改与更新中，点击这里查看最新的内容","categories":[],"tags":[]},{"title":"小程序二维码中如何使用二进制模式","slug":"小程序二维码中如何使用二进制模式","date":"2020-02-23T13:06:24.000Z","updated":"2023-08-18T02:07:53.383Z","comments":true,"path":"2020/02/23/小程序二维码中如何使用二进制模式/","link":"","permalink":"http://aizigao.xyz/2020/02/23/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%8C%E7%BB%B4%E7%A0%81%E4%B8%AD%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%A8%A1%E5%BC%8F/","excerpt":"","text":"背景最近在为我们的公交小程序添加二维码功能，挺简单的需求对吧？我整了好两天了，我原本以为一个二维码能有什么复杂的，文本是什么内容，扫出来是什么内容就完了。没有想到公司用的是二进制模式下二维码，我翻阅了 github 上现在小程序中专门做二维码的库，发现没有实现这个功能的，后来就改采取了一种中转的模式。 实现我现在的二维码数据如下我在 web 端下发现在 node-qrcode这个库可以很轻松的输入二进制的二维码，但是这个库在小程序端现在跑不起来, 主要是不支持Buffer 123456789// Regular array example// WARNING: Element values will be clamped to 0-255 even if your data contains higher values.const QRCode = require(&#x27;qrcode&#x27;)QRCode.toFile( &#x27;foo.png&#x27;, [&#123; data: [253,254,255], mode: &#x27;byte&#x27; &#125;], // mode为二进制模式 ...options..., ...callback...) 我们一般成二维码会用到canvas或者svg格式，然后我们知道小程序里其实是可以用 base64 化的 svg 做为图片的 src, 如: 1&lt;image src=&#x27;data:image/svg+xml;base64,...&#x27;/&gt; 所以我只能另找一个可以转成 svg 并且支持二进制模式的库就好了。但是很可惜，我没有找到，但是这个库qrcode-generator却有方法 可以添加数据处理， 我尝试将我的数据这个方法转为 binary 后终于成功了, 下面是具体代码 123456789101112131415161718192021222324import QRCode from &quot;qrcode-generator&quot;;function hexToBytes(hex: string) &#123; const bytes = []; for (let c = 0; c &lt; hex.length; c += 2) &#123; bytes.push(parseInt(hex.substr(c, 2), 16)); &#125; return bytes;&#125;const genQRcordBinImg = (data: string) =&gt; &#123; QRCode.stringToBytes = hexToBytes; const typeNumber = 0; // 0 is auto const errorCorrectionLevel = &quot;L&quot;; const qr = QRCode(typeNumber, errorCorrectionLevel); qr.addData(data, &quot;Byte&quot;); qr.make(); const rst = qr.createSvgTag(2, 0); return `data:image/svg+xml;base64,$&#123;btoa(rst)&#125;`;&#125;;const qrCodeImg = genQRcordBinImg( &quotquot;); 1&lt;image :src=&quot;qrCodeImg&quot; /&gt; 本博客持续修改与更新中，点击这里查看最新的内容","categories":[],"tags":[{"name":"小程序","slug":"小程序","permalink":"http://aizigao.xyz/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"},{"name":"个人笔记","slug":"个人笔记","permalink":"http://aizigao.xyz/tags/%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/"}]},{"title":"什么是良好的工作状态(TODO)","slug":"什么是良好的工作状态","date":"2020-02-23T06:17:54.000Z","updated":"2023-08-18T02:07:53.247Z","comments":true,"path":"2020/02/23/什么是良好的工作状态/","link":"","permalink":"http://aizigao.xyz/2020/02/23/%E4%BB%80%E4%B9%88%E6%98%AF%E8%89%AF%E5%A5%BD%E7%9A%84%E5%B7%A5%E4%BD%9C%E7%8A%B6%E6%80%81/","excerpt":"","text":"我在压力大时，不自觉的读文档会囫囵吞枣,这样会漏掉很多东西 掌握目录， 梳理作者的流程 提出关键点 番茄化 分阶段化 制定计划 学习新的理论的流程是怎么样的？ 看理论 跑demo 运用一下 过详细文档 我怎么把刚刚的文档 用自已的粗俗语言组织一下 源码学习 本博客持续修改与更新中，点击这里查看最新的内容","categories":[],"tags":[]},{"title":"如何独自开展一个项目(TODO)","slug":"如何独自开展一个项目","date":"2020-02-23T06:16:13.000Z","updated":"2023-08-18T02:07:53.335Z","comments":true,"path":"2020/02/23/如何独自开展一个项目/","link":"","permalink":"http://aizigao.xyz/2020/02/23/%E5%A6%82%E4%BD%95%E7%8B%AC%E8%87%AA%E5%BC%80%E5%B1%95%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE/","excerpt":"","text":"前期有准备什么 技术调研？ 业务分析 考虑好流程 开发中 目录设计 项目分割 分批次计划 制定时间表 上线 运维 本博客持续修改与更新中，点击这里查看最新的内容","categories":[],"tags":[]},{"title":"键盘上所有特殊符号的英文读法及希腊字母表","slug":"键盘上所有特殊符号的英文读法","date":"2019-11-23T06:31:50.000Z","updated":"2023-08-18T02:07:53.796Z","comments":true,"path":"2019/11/23/键盘上所有特殊符号的英文读法/","link":"","permalink":"http://aizigao.xyz/2019/11/23/%E9%94%AE%E7%9B%98%E4%B8%8A%E6%89%80%E6%9C%89%E7%89%B9%E6%AE%8A%E7%AC%A6%E5%8F%B7%E7%9A%84%E8%8B%B1%E6%96%87%E8%AF%BB%E6%B3%95/","excerpt":"","text":"键盘上所有特殊符号的英文读法123456789101112131415161718192021222324252627282930! 叹号 exclamation mark/bang ? 问号 question mark , 逗号 comma . 点号 dot/period/point : 冒号 colon ; 分号 semicolon ” 双引号 quotation marks/double quote ‘ 单引号/撇号 apostrophe/single quote ` 重音号 backquote/grave accent * 星号 asterisk/star + 加号 plus sign- 减号/横线 hyphen/dash/minus sign/ = 等号 equal sign / 斜线 slash \\ 反斜线 backslash/escape | 竖线 bar/pipe/vertical bar _ 下划线 underline/underscore $ 美元符号 dollar sign @ at at sign \\# 井号 crosshatch/sharp/hash % 百分号 percent sign/mod &amp; and/和/兼 and/ampersand ^ 折音号 circumflex/caret ~ 波浪号 tilde &#123;&#125; （左右）花括号/大括号 (left/right|open/close) braces [] （左右）方括号/中括号 (left/right|open/close) brackets () （左右）圆括号/小括号 (left/right|open/close) parentheses &lt;&gt; 尖括号 angle brackets &lt; 大于号 less than &gt; 小于号 greater than 葡语中的变音符号（diacritic mark）在英文中的读法：12345^ circumflex/caret ~ tilde/squiggle ´ acute ` grave ç cedilla 希腊字母表123456789101112131415161718192021222324252627282930313233343536373839404142434445464748α Α alpha /alpha/ h表示送气音，在古希腊语中尚没有音位/f/，所以/pha/的发音类似普通话的“趴”。 β Β beta /be:ta/ /e:/表示长元音，/e/的发音不是英语D.J.音标里的\\[e\\]，而类似K.K.音标里的/e/或者法语的/e/。/t/不送气，所以/ta/类似普通话“搭”而不是“他”。 γ Γ gamma /gam:a/ /m:/表示长辅音，即在发辅音时，其持阻阶段应该适当延长，然后再做除阻动作。 δ Δ delta /de:lta/ ε Ε epsilon /epsilo:n/ /o/的发音要比英国英语字母组合au的发音更闭一些。 ζ Ζ zeta /ze:ta, dze:ta/ /z, dz/浊的塞音或塞擦音。 η Η eta /e:ta/ 第一个音节为长音。 θ Θ theta /the:ta/ /th/表示送气音，t为齿化的(dentalised)塞音，而不是英语里的/t/，类似汉语里的t，但要更紧一些。 ι Ι iota /jo:ta，io:ta/ κ Κ kappa /kap:a/ /p:/表示长辅音，其描述类似/m:/，前一个p类似于英语里“失去爆破”或者汉语粤方言中的塞音韵尾/-p/，/k/不送气。 λ Λ lambda /lambda/ μ Μ my /my:/ /y:/是长元音，类似汉语的“淤”以及法语字母u单独存在时的发音。 ν Ν ny /ny:/ ξ Ξ xi /ksi:/ ο Ο omicron /omikro:n/ micron表示“小”，所以是“短o”的意思。 π Π pi /pi:/ /p/不送气，所以应该类似“逼”而不是“批”。 ρ Ρ rho /rho:/ /rh/实际上表示清化的擦颤音，这里打不出来，姑且用这个组合吧。据说捷克语里有，这就是为什么Dvorak被翻译为“德沃夏克”而不是“德沃拉克”的原因。据说古希腊语有两个颤音，一个是词头的擦颤音，一个是词尾的成音节的真正浊颤音，所以希腊字母标里有两个rho，一个只用在词头，一个只用在词尾。 σ Σ sigma /sigma/ /s/为齿化的，类似汉语的s-，而不是英语的\\[s\\]。与rho类似希腊字母表里也有两个sigma，一个在词头，一个在词尾，据说在词尾的也能成音节，会不会读得象汉语的“丝”一样就不得而知了。 τ Τ tau /tau,tay?/ 后面一部分得读音不得而知，/u/还是/y/？/t/不送气，所以应该类似“搭屋”/“搭淤”，而非“套”。 υ Υ ypsilon /y:psilo:n/ /y/类似汉语的“淤”而非“乌”，拉丁语里没有这个音，所以字母命名为 igraeca，即“希腊的i”的意思。与/i/部位相同，但是圆唇元音。 φ Φ phi /phi:/ /ph/表示送气音，所以应该类似“批”。 χ Χ chi /khi:/ c在古代拉丁语里的读音总是为/k/，/kh/为送气音。 ψ Ψ psi /psi:/ ω Ω omega /o:me:ga/ /o:/是长音，因为mega表示大的意思，即“大的o” 本博客持续修改与更新中，点击这里查看最新的内容","categories":[],"tags":[{"name":"英语","slug":"英语","permalink":"http://aizigao.xyz/tags/%E8%8B%B1%E8%AF%AD/"}]},{"title":"本地配置https及设备导入证书","slug":"本地配置https及设备导入证书","date":"2019-09-18T13:20:30.000Z","updated":"2023-08-18T02:07:53.435Z","comments":true,"path":"2019/09/18/本地配置https及设备导入证书/","link":"","permalink":"http://aizigao.xyz/2019/09/18/%E6%9C%AC%E5%9C%B0%E9%85%8D%E7%BD%AEhttps%E5%8F%8A%E8%AE%BE%E5%A4%87%E5%AF%BC%E5%85%A5%E8%AF%81%E4%B9%A6/","excerpt":"","text":"本博客持续修改与更新中，点击这里查看最新的内容 背景平时开发时可能需要本地试下 https 的功能，要不正式上线时，http 和 https 会有一定的跨域的风险；如果突然想要使用正式环境的 https 的接口，配置一下 https 也是少不了的 方案1. 找个路径生成一下证书1234567891011121314openssl req \\ -newkey rsa:2048 \\ -x509 \\ -nodes \\ -keyout server.key \\ #导出的key名 -new \\ -out server.crt \\ # 导出的crt名 -subj /CN=m.test.com \\ #写你的域名 -reqexts SAN \\ -extensions SAN \\ -config &lt;(cat /System/Library/OpenSSL/openssl.cnf \\ &lt;(printf &#x27;[SAN]\\nsubjectAltName=DNS:m.test.com&#x27;)) \\ #写入你的域名 -sha256 \\ -days 365 #有效期一个365, 只有小于365才能在android上生效 android 高版本后只有系统级证书会生效，见 https://blog.nviso.eu/2020/11/19/proxying-android-app-traffic-common-issues-checklist/ 2. 导入 nginx, ssl 是 443 端口，需要导入123456789server &#123; listen 80; listen [::]:80; listen 443 ssl; server_name test.com; ssl_certificate /Users/martin/MyWorkPlace/test2/dev/server.crt; ssl_certificate_key /Users/martin/MyWorkPlace/test2/dev/server.key;&#125; 3. mac 下导入证书mac 双击打开 server.crt，然后在钥匙串里选择 aways trust 4. ios 下导入证书手机域名绑定啥的我的用 charles 代理过去的 ios 导入证书只能通入自带的 safari,邮箱可能也可以，我没有试过。我的做法在 server.crt 文件夹内起个服务器,这里我用的是 npm 的 http-server，没有的就按下面的方式安装一下 1npm i -g http-server 启动 http-server 1http-server ios 下载完成后，弹出弹窗 然后进入设置-&gt;通用-&gt;关于本机-&gt;证书信任设置安装描述文件 5. 安卓下导入证书6. 清除 httpschrome url 输入 chrome://net-internals/#hsts 在 Delete domain security policies 输入你要删除的域名，注意的如是多级域名,最好一级二级都删一遍,如second.first.test.com 最好输入以下都删一遍 second.first.test.com first.test.com test.com 手机手机中清除 https 比较麻烦，能用隐私模式就用隐私模式吧, 有通用方案的同学请告知","categories":[],"tags":[]},{"title":"用户认证好多种？ 我要学习一下了","slug":"用户认证好多种？-我要学习一下了","date":"2019-08-23T11:45:34.000Z","updated":"2023-08-18T02:07:53.583Z","comments":true,"path":"2019/08/23/用户认证好多种？-我要学习一下了/","link":"","permalink":"http://aizigao.xyz/2019/08/23/%E7%94%A8%E6%88%B7%E8%AE%A4%E8%AF%81%E5%A5%BD%E5%A4%9A%E7%A7%8D%EF%BC%9F-%E6%88%91%E8%A6%81%E5%AD%A6%E4%B9%A0%E4%B8%80%E4%B8%8B%E4%BA%86/","excerpt":"","text":"本博客持续修改与更新中，点击这里查看最新的内容 做了开发几年，登录这块的东西一直了解不多，因为实现的方式有挺多的，我现在要系统的学习一下, 了解一下他们的原理。 目前看了几篇博客，这篇为收集用，之后会用 node 或 java 尝试的写一下。 Cookie-Session 认证我上家公司用的这种方式 流程认证过程大致如下： 用户输入用户名、密码或者用短信验证码方式登录系统； 服务端验证后，创建一个 Session 信息，并且将 SessionID 存到 cookie，发送回浏览器； 下次客户端再发起请求，自动带上 cookie 信息，服务端通过 cookie 获取 Session 信息进行校验；弊端 只能在 web 场景下使用，如果是 APP 中，不能使用 cookie 的情况下就不能用了(app 里用 http 协议)； 即使能在 web 场景下使用，也要考虑跨域问题，因为 cookie 不能跨域(跨域方案, nginx&#x2F;CORS)； cookie 存在 CSRF（跨站请求伪造）的风险(http-only|https 的下 cookie 设置 secure)； 如果是分布式服务，需要考虑 Session 同步问题(redis)； Cookie-Session 改造版由于传统的 Cookie-Session 认证存在诸多问题，可以把上面的方案改造一下。改动的地方如下： 不用 cookie 做客户端存储，改用其他方式，web 下使用 local storage，APP 中使用客户端数据库，这样就实现了跨域，并且避免了 CSRF ; 服务端也不存 Session 了，把 Session 信息拿出来存到 Redis 等内存数据库中，这样即提高了速度，又避免了 Session 同步问题； 经过改造之后变成了如下的认证过程： 用户输入用户名、密码或者用短信验证码方式登录系统； 服务端经过验证，将认证信息构造好的数据结构存储到 Redis 中，并将 key 值返回给客户端； 客户端拿到返回的 key，存储到 local storage 或本地数据库； 下次客户端再次请求，把 key 值附加到 header 或者 请求体中； 服务端根据获取的 key，到 Redis 中获取认证信息； JWT上面的方案虽然经过了改版，但还是需要客户端和服务器端维持一个状态信息，比如用 cookie 换 session ,或者用 key 换 Redis 的 value 信息，基于 JWT 的 Token 认证方案可以省去这个过程。 认证过程 依然是用户登录系统； 服务端验证，将认证信息通过指定的算法（例如 HS256）进行加密，例如对用户名和用户所属角色进行加密，加密私钥是保存在服务器端的，将加密后的结果发送给客户端，加密的字符串格式为三个”.” 分隔的字符串 Token，分别对应头部、载荷与签名，头部和载荷都可以通过 base64 解码出来，签名部分不可以； 客户端拿到返回的 Token，存储到 local storage 或本地数据库； 下次客户端再次发起请求，将 Token 附加到 header 中； 服务端获取 header 中的 Token ，通过相同的算法对 Token 中的用户名和所属角色进行相同的加密验证，如果验证结果相同，则说明这个请求是正常的，没有被篡改。这个过程可以完全不涉及到查询 Redis 或其他存储； 优点 使用 json 作为数据传输，有广泛的通用型，并且体积小，便于传输； 不需要在服务器端保存相关信息； jwt 载荷部分可以存储业务相关的信息（非敏感的），例如用户信息、角色等； TODO: 实现 Auth2wiki: TODO: 添加 wiki 第三方认证，Auth 也分好多种， 我看了阮老师的文章，主要下面几种 强制退登，只允许一个用户登录 SSO参考文章感谢网上的大佬的指导了 说一说几种常用的登录认证方式，你用的哪种 - 风的姿态 - 博客园 理解 OAuth 2.0 - 阮一峰的网络日志 OAuth 2.0 的四种方式 - 阮一峰的网络日志","categories":[],"tags":[]},{"title":"流畅使用CURL与后端撕B","slug":"流畅使用CURL与后端撕B","date":"2019-08-02T06:45:25.000Z","updated":"2023-08-18T02:07:53.459Z","comments":true,"path":"2019/08/02/流畅使用CURL与后端撕B/","link":"","permalink":"http://aizigao.xyz/2019/08/02/%E6%B5%81%E7%95%85%E4%BD%BF%E7%94%A8CURL%E4%B8%8E%E5%90%8E%E7%AB%AF%E6%92%95B/","excerpt":"","text":"本博客持续修改与更新中，点击这里查看最新的内容 什么是 CURLcurl，全称 CommandLine URL 或 CommandLine Uniform Resource Locator， curl 是在命令行方式下工作，利用 URL 的语法进行数据的传输或者文件的传输, 你就单纯把它当成一个能在终端里发送完整的请求的方式就好了。 这个命令行工具在 Unix 和 Linux 操作系统下都自带，是一个开源的工具，功能十分强大, window下可以装上 git-bash 也会有，约等于大家电脑里都有。 下面是 curl 的官方网站，我们可以该网站获取该工具的最新版本，还有最全面的使用方法。我们复制出一个 CURL 请求（csdn 的一个接口） 1curl &#x27;https://msg.csdn.net/v1/chrome/notification/view&#x27; -X OPTIONS -H &#x27;Access-Control-Request-Method: POST&#x27; -H &#x27;Origin: https://blog.csdn.net&#x27; -H &#x27;Referer: https://blog.csdn.net/deliciousion/article/details/78062521&#x27; -H &#x27;User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36&#x27; -H &#x27;Access-Control-Request-Headers: content-type&#x27; --compressed 从上面可以看出一个完整的 CURl 带有些完整的 http 信息,具体的 CURL 的参数与用法可以参考其它的文章,这里主要讲下 CURL 在日常开发中的使用 如何撕 B我们前端开发人员在与后端人员联调时，我们往往会使用 postman 这样的 gui 工具进行调试，可是 postman 毕竟还是要手动的一个输入一个个的参数,这个会比较麻烦. 试想一下这个场景,当你在写一个很大很复杂的表单，和后端调试需要很长时间, 每次都需要重新填写表单，然后又因为这个调试没法子切到其它工作,这会非常浪费时间。按常理来说，这是后端需要自已测试通过后才行，但是工作场景下确实经常有这个问题发生。 所以这个时候你可以打开 chrome 控制台下的 XHR 下的右键复制 CURL 功能,然后把得制下来的 CURL 发经后端开发的同学，之后就可以继续其它工作了。 后记后续可以也可以再多了解一下 curl 的格式，这个东西其实可以做很多事情，大体上可以代替 postman 的大部分功能了，比如文件上传什么的；在终端上用，之后写个脚本啥的也会比较方便。","categories":[],"tags":[]},{"title":"Manjaro i3wm 一些蓝牙音箱/耳机相关的配置","slug":"Manjaro-i3wm-一些蓝牙音箱-耳机相关的配置","date":"2019-07-30T10:52:27.000Z","updated":"2023-08-18T02:07:53.124Z","comments":true,"path":"2019/07/30/Manjaro-i3wm-一些蓝牙音箱-耳机相关的配置/","link":"","permalink":"http://aizigao.xyz/2019/07/30/Manjaro-i3wm-%E4%B8%80%E4%BA%9B%E8%93%9D%E7%89%99%E9%9F%B3%E7%AE%B1-%E8%80%B3%E6%9C%BA%E7%9B%B8%E5%85%B3%E7%9A%84%E9%85%8D%E7%BD%AE/","excerpt":"","text":"本博客持续修改与更新中，点击这里查看最新的内容 背景最近又因为系统的一些莫名问题，导致我又重装了一变manjaro i3版本，这个版本的蓝牙毛病挺多的，记录一下，下次好找(虽然已经备份好了dotfile了) 问题与解决方案耳机连接后没有声音缺少模块,安装 pulseaudio-bluetooth 1pacman -S pulseaudio-bluetooth 连接后音量无法调节默认的音量调节为volumeicon, 改为 pa-applet就好了, 安装 pa-applet 1sudo pacman -S pa-applet 修改 ~/.i3/config 123#-- 注释它#exec --no-startup-id volumeiconexec --no-startup-id pa-applet 蓝牙音箱或耳机链接后，电脑不会切换播放设备, 需要重启应用才生效G修改配置 &#x2F;etc&#x2F;pulse&#x2F;default.pa 12# 添加这一行load-module module-switch-on-connect 电脑重启后，不会自动链接这个比较傻了，在blueman 蓝牙管理器里打开 蓝牙一直可见 就好了 后记为了用个蓝牙耳机，整得确实挺麻烦的","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"http://aizigao.xyz/tags/linux/"}]},{"title":"使用yadm (git)管理系统配置文件(dotfiles)","slug":"使用yadm-git-管理系统配置文件-dotfiles","date":"2019-07-29T12:06:41.000Z","updated":"2023-08-18T02:07:53.291Z","comments":true,"path":"2019/07/29/使用yadm-git-管理系统配置文件-dotfiles/","link":"","permalink":"http://aizigao.xyz/2019/07/29/%E4%BD%BF%E7%94%A8yadm-git-%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6-dotfiles/","excerpt":"","text":"本博客持续修改与更新中，点击这里查看最新的内容 背景linux 和 macos下大部分的软件配置文件都是在用户目录对应以 “.”打开的隐藏文件或者是xxxrc 命名的文件，其余的基本上配置也有放在.config目录下的。 一般来说只要备份好这些dotfiles 另写一个系统初始化的脚本，在做系统重装或系统迁移时就会比较的方便了。 之前一直在用 mackup 做为管理工具, 但是使用下来个人感觉是不很满意 备份文件用的是软链接，不是很喜欢这种方式，很不好管理, 移除mackup时会比较麻烦, 感觉有一定的入侵性 数据同步一般用网盘或者手动git的方式，用网盘的话，测不能做到的版本控制, 每次修改完文件后不能回滚 最近逛reddit时，发现一个名为yadm 的管理工具，作法是默认将整个用户目录处理为一个git仓库但不会影响到正常的git使用，因为方案是用git管理，好处理就不用多说了，cli使用上也和git大体相同。 基本使用 走一下官方的流程 我当前的设备为一台manjaro的系统, 使用yay为包管理 123# 安装yay yadm# 基本使用 123456yadm inityadm add &lt;important file&gt;yadm commityadm inityadm add &lt;important file&gt;yadm commit 可以看到的yadm的用法和git本身一毛一样，会用git就会用yadm, 因为基于git，对配置文件做分支管理，版本回滚都很方便。并且不像mackup那样用ln， 入侵性很低。 系统级用法默认yadm 控制范围是 home目录的，如果你想把 /etc 目录下的内容也管理进来的话，我试了两个方案。 配置 yadm的控制范围为 / 使用ln 将系统的文件链接到home目录下 配置 yadm的控制范围为 /默认使用 root用户时，控制范围就是 ‘&#x2F;‘, 翻阅yadm 的issue ，也可以同时更改一下config目录, 并加一个alias进行处理 1234# create an alias to run yadm for system filesalias sysyadm=&quot;sudo yadm -Y /etc/yadm&quot;# initialize the yadm repo using the worktree of &quot;/&quot;sysyadm init -w / 使用ln 将系统的文件链接到home目录下个人当前用 ln方式管理系统级的文件，因为不同系统下结构确实也有一些不同，系统级的配置也不会太多，就不做整个系统的管理了，当前我建立了 ~/.config/systemrc 文件夹，将系统级的文件都软链到这个目录下，如hosts文件 1sudo ln -s -f /home/aizigao/.config/systemrc/etc/hosts /etc/hosts 忽略文件平时开发时，习惯性直接 git add ./ 添加针对整个目录的管理，但是有些日志文件不小心就会被打进去了，如我的rime配置目录 12345678910111213.├── build├── default.custom.yaml├── double_pinyin_flypy.schema.yaml├── installation.yaml├── luna_pinyin.userdb├── pinyin_simp.dict.yaml├── pinyin_simp.schema.yaml├── sync├── user.yaml├── xinshijiwubi.dict.yaml├── xinshijiwubi.schema.yaml├── xinshijiwubi.userdb 我只有管理部分文件，又不想一个一个的yadm add，这时就建一个.gitignore就好了 12build*.userdb 自用的alias由于系统的配置文件还是比较分散的，加了一个alias做修改过的文件的add 1alias yadm_add_m =&#x27;yadm ls-files --modified | xargs yadm add&#x27; 其它 看了文档，yadm还可以支持文件加密啥的，因为我用了github的私有仓库，这个就没有使用","categories":[],"tags":[]},{"title":"[记录][笔记][读后] 熟练的五笔输入法如同拼音输入和键盘打字都不会中断思维","slug":"记录-笔记-读后-熟练的五笔输入法如同拼音输入和键盘打字都不会中断思维","date":"2019-07-10T05:34:17.000Z","updated":"2023-08-18T02:07:53.749Z","comments":true,"path":"2019/07/10/记录-笔记-读后-熟练的五笔输入法如同拼音输入和键盘打字都不会中断思维/","link":"","permalink":"http://aizigao.xyz/2019/07/10/%E8%AE%B0%E5%BD%95-%E7%AC%94%E8%AE%B0-%E8%AF%BB%E5%90%8E-%E7%86%9F%E7%BB%83%E7%9A%84%E4%BA%94%E7%AC%94%E8%BE%93%E5%85%A5%E6%B3%95%E5%A6%82%E5%90%8C%E6%8B%BC%E9%9F%B3%E8%BE%93%E5%85%A5%E5%92%8C%E9%94%AE%E7%9B%98%E6%89%93%E5%AD%97%E9%83%BD%E4%B8%8D%E4%BC%9A%E4%B8%AD%E6%96%AD%E6%80%9D%E7%BB%B4/","excerpt":"","text":"本博客持续修改与更新中，点击这里查看最新的内容 原贴 熟练的五笔输入法如同拼音输入和键盘打字都不会中断思维 – 辛德林记 熟练后用五笔打经常打的字，根本无需思考编码，非常自然地就打出来了，就跟用笔写常用字无需思考一样，这通常被人称作条件反射. 非常同意老哥的说法，打字中的一直想着编码是非常影响思路，我理想的方式是打字方式(记录想法的方式)可以赶上并不中断自已的思考.我当前认为电子文字的记录是当前最优的记录想法的方式了，对比其它方式 语音录入 –&gt; 无法修改、录入时间长、线性记录、没法做索引 | 简单与实时,记录精准 语音转文字 –&gt; 错误率高不够精准，修改麻烦 | 可修改，加索引 手写 –&gt; 录入麻烦， 速度录入慢 , 整理麻烦，整理后可读性降低 |可整理，可索引，图文结构自由首次录入时非常爽 电子文档 –&gt; 录入麻烦、速度未训练前输入慢、文档结构调整花时间 | 修改方便, 可以整理，训练后可以加速输入，整理后干净, 文档结构规范且统一 关于思维中断也非常同意老哥的想法，任何录入方式都会中断思维，拼音也好, 五笔也好，语音录入也好，关键是要把内心想法整理出来才是最终的目的。对于我这种少于输入的人来说，之前的好多想法也是流失和遗忘了， 电子录入当前对我来说是最好的, 拼音最大问题还是要选字，五笔用肌肉记忆后会给大脑少一些负担，相对我觉得更好，就是这个肌肉训练对于我这种不常打字的人来说有点难了（开始尝试训练了）. 五笔有先天的缺陷，因为它其实算不上输入法，它本质上是“抄写法”。它只有在“看到什么打什么”的时候才有一些优势，而在“想到什么打什么”的时候，就明显处于劣势了。五笔用户在边想边写的情况下，思维经常会被“回忆编码”所中断（也许那些太过常见的编码早已“被手指记住”，但肯定有一些编码需要时间才能回忆得出来）。一直以来，人们传说（五笔也如此宣传）五笔是最快的输入法，事实上它是打了个马虎眼：它只是在抄写的时候最快，一旦脱稿，它的速度就会降到抄写时的一半，甚至四分之一[1]。 这个是我现在的状态没有错了，一般要记录我不熟悉的内容时，速度非常慢,但是智拼音理论上是用了最多人想输入什么的这个概念，这个用了之后也会有问题，就是可能自已写出的东西直接被输入法影响了，而换了一个词与原本的想法有所差距。 说实话声母和韵母比字根快一点中，字根说是可以肌肉记忆，但是临时拆字是真的难，看来我还是要强化前 500 的练习才行, 好多字我可以直接 z+拼音了 老哥记录下来的评论很趣","categories":[],"tags":[{"name":"记录，笔记, 读后","slug":"记录，笔记-读后","permalink":"http://aizigao.xyz/tags/%E8%AE%B0%E5%BD%95%EF%BC%8C%E7%AC%94%E8%AE%B0-%E8%AF%BB%E5%90%8E/"}]},{"title":"RegExp先行断言后行断言看了半天不懂一看英文我悟到了","slug":"RegExp先行断言后行断言看了半天不懂一看英文我悟到了","date":"2018-10-23T06:24:26.000Z","updated":"2023-08-18T02:07:53.156Z","comments":true,"path":"2018/10/23/RegExp先行断言后行断言看了半天不懂一看英文我悟到了/","link":"","permalink":"http://aizigao.xyz/2018/10/23/RegExp%E5%85%88%E8%A1%8C%E6%96%AD%E8%A8%80%E5%90%8E%E8%A1%8C%E6%96%AD%E8%A8%80%E7%9C%8B%E4%BA%86%E5%8D%8A%E5%A4%A9%E4%B8%8D%E6%87%82%E4%B8%80%E7%9C%8B%E8%8B%B1%E6%96%87%E6%88%91%E6%82%9F%E5%88%B0%E4%BA%86/","excerpt":"","text":"背景最近系统性的学习了遍正则, 开始看的是中文档，看到先行断言和后行断言时，又开始蒙逼了。我完全不能理解“先行断言”和“后行断言”这两个词的意思。 学习打开英文文档, 得到下面这两张表 Characters &#x2F; constructs Corresponding article \\, ., \\cX, \\d, \\D, \\f, \\n, \\r, \\s, \\S, \\t, \\v, \\w, \\W, \\0, \\xhh, \\uhhhh, \\uhhhhh, [\\b] Character classes ^, $, x(?=y), x(?!y), (?&lt;=y)x, (?&lt;!y)x, \\b, \\B Assertions (x), (?:x), (?&lt;Name&gt;x), &#96;x y, [xyz], [^xyz], *Number*&#96; *, +, ?, x&#123;*n*&#125;, x&#123;*n*,&#125;, x&#123;*n*,*m*&#125; Quantifiers \\p&#123;*UnicodeProperty*&#125;, \\P&#123;*UnicodeProperty*&#125; Unicode property escapes 好吧，断言就是Assertions，先行和后行表示位置，看来还是很信达雅的，就是没有看到原文的话还真看不懂了，之后还是要多翻英文档了。其中“先行” 以应 ‘lookahead’ （看头），“后行”为 ‘lookbehind’(看尾)。 各种断言也在这里记录一下吧 Characters 中文 Meaning x(?=y) 先行断言 Lookahead assertion: (positive lookahead) Matches “x” only if “x” is followed by “y”. For example, &#x2F;Jack(?=Sprat)/ matches “Jack” only if it is followed by “Sprat”. &#96;&#x2F;Jack(?&#x3D;Sprat x(?!y) 正向否定查找(这个翻译的也不好，反正我不理解) Negative lookahead assertion: Matches “x” only if “x” is not followed by “y”. For example, /\\d+(?!\\.)/ matches a number only if it is not followed by a decimal point. /\\d+(?!\\.)/.exec(&#39;3.141&#39;) matches “141” but not “3”. (?&lt;=y)x 后行断言 Lookbehind assertion: Matches “x” only if “x” is preceded by “y”. For example, /(?&lt;=Jack)Sprat/ matches “Sprat” only if it is preceded by “Jack”. &#96;&#x2F;(?&lt;&#x3D;Jack (?&lt;!y)x 反向否定查找 Negative lookbehind assertion: Matches “x” only if “x” is not preceded by “y”. For example, /(?&lt;!-)\\d+/ matches a number only if it is not preceded by a minus sign. /(?&lt;!-)\\d+/.exec(&#39;3&#39;) matches “3”. /(?&lt;!-)\\d+/.exec(&#39;-3&#39;) match is not found because the number is preceded by the minus sign. 图型展示一下 可以在 https://regexper.com/ 这个网站测试一下正则还是 先行断言&#x2F;positive lookahead 正向否定&#x2F;negative lookahead https://regexper.com/不支持 lookbehind，就不展示了。 后记还是是英文吧 positive lookahead, negative lookahead, positive lookbehind, negative lookbehind 好记多了 本博客持续修改与更新中，点击这里查看最新的内容","categories":[],"tags":[{"name":"个人吐槽","slug":"个人吐槽","permalink":"http://aizigao.xyz/tags/%E4%B8%AA%E4%BA%BA%E5%90%90%E6%A7%BD/"}]},{"title":"OSS对象存储图片处理后颜色失真","slug":"对象存储图片处理后图片颜色失真问题","date":"2018-06-02T18:00:56.000Z","updated":"2023-08-18T02:07:53.356Z","comments":true,"path":"2018/06/03/对象存储图片处理后图片颜色失真问题/","link":"","permalink":"http://aizigao.xyz/2018/06/03/%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86%E5%90%8E%E5%9B%BE%E7%89%87%E9%A2%9C%E8%89%B2%E5%A4%B1%E7%9C%9F%E9%97%AE%E9%A2%98/","excerpt":"","text":"ISSUE前段时间小弟接到一个issue是说在使用对象存储的图片处理后部分图片在手机上颜色失真了😂, 这个让我让很不理解，也排查了好长时间，大体就是下面这个效果 下面这张没有处理的dio 下面这张是由oss处理后的dio, (加了 ?x-oss-process&#x3D;image&#x2F;resize,m_lfit,limit_0,w_1000) 由上两张图可能看到的是，下面一张的dio明显更yellow 而且看起来更high 于上面一张 排查当前大多数的网站都喜欢使用对象存储上的图片处理来压缩线上的图片资源，如调整大小和格式化图片格式为webp之类的更适合web所使用的格式。而且常见的对象存储都是这些参数的，一般就是在图片后面拼个query参数就可以，还是比较简单易用的😎；相关的文档比如： 阿里云oss 腾讯云cos 数据万象 我发现一但移除oss的处理参数后，颜色是正常的，但是为什么颜色会变呢? 最终我把图片下载下来后才发现问题所在, 我下载了图片然后用ps打开后发现了问题所在 如上图所示，这张图片的颜色模式是cmyk 的，cmyk是用于是印刷用的四色模式, 而显示器所用的模式是rgb， 如下图 这样的话解释就很合理了，当前的图像处理都是基于颜色通道处理的，rgb有红，绿，蓝三色通道，而cmyk 有青色，洋红，黄色及补色的黑色通道. 个人猜测是添加图像处理参数后, oss把cmyk 的四通道当成三通道处理，最终结果就是少了一个色彩通道了。 解决方案让ui同学修改图片模式为rgb后，重新上传, 具体操作就是在ps中 图像-&gt;调整-&gt;模式-&gt;rgb 后记上述的色彩模式玩过ps大部分课程第一堂课就会说cmyk和rgb的关系🤔, 还好玩过ps, 不让还真找不到原因. 本博客持续修改与更新中，点击这里查看最新的内容","categories":[],"tags":[{"name":"frontend oss 图像处理","slug":"frontend-oss-图像处理","permalink":"http://aizigao.xyz/tags/frontend-oss-%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"}]},{"title":"批量对项目设置git config","slug":"批量对项目设置git-config","date":"2017-08-29T23:47:08.000Z","updated":"2023-08-18T02:07:53.405Z","comments":true,"path":"2017/08/30/批量对项目设置git-config/","link":"","permalink":"http://aizigao.xyz/2017/08/30/%E6%89%B9%E9%87%8F%E5%AF%B9%E9%A1%B9%E7%9B%AE%E8%AE%BE%E7%BD%AEgit-config/","excerpt":"","text":"本博客持续修改与更新中，点击这里查看最新的内容 背景我一般设置默认的 git config 设置为自已的 github 帐号， 但是公司的项目还是设置为公司的 gitlab 的帐号较好，这就出现了一个问题: 如何批量的公司的项目设置 git config 呢 方式 我将公司的项目都放在了一个叫 works 的文件夹内 在 works 内新建 gitConfig.sh 123456789#!/bin/bashfor d in */ ; do cd $d git config user.name &#x27;yourName&#x27; git config user.email &#x27;youEmail&#x27; cd ..done 运行 12chmod +x ./gitConfig.sh./gitConfig.sh 原理也很简单，就是遍历当前文件夹，进入文件夹，设置然后返回目录,如果 git 项目不在同一个文件夹内，就建一个数组就好啦","categories":[],"tags":[]},{"title":"windows 下jetbrains 系IDE IDEA WebStorm 终端设置为git bash","slug":"windows-下jetbrains-系IDE-IDEA-WebStorm-终端设置为git-bash","date":"2017-04-18T07:02:56.000Z","updated":"2023-08-18T02:07:53.176Z","comments":true,"path":"2017/04/18/windows-下jetbrains-系IDE-IDEA-WebStorm-终端设置为git-bash/","link":"","permalink":"http://aizigao.xyz/2017/04/18/windows-%E4%B8%8Bjetbrains-%E7%B3%BBIDE-IDEA-WebStorm-%E7%BB%88%E7%AB%AF%E8%AE%BE%E7%BD%AE%E4%B8%BAgit-bash/","excerpt":"","text":"[TOC] 背景虽然本人现在用的osx系统，但是有时操作同事的windows系统时，在ide下没有好用的终端实在是蛋疼，window下的bash方案现在感觉也挺多的，git bash ，cmder ，babun都是不错的选择。今天偶然的发现在 IDEA下的居然有个 terminal 的醒置选项，发现可以设置为 git bash，好评 ​:smile:​ 具体操作 设置为 git bash改shell path 为&quot;C:\\Program Files (x86)\\Git\\bin\\sh.exe&quot; --login -i 设置为 babun 、cygwin改shell path 为C:\\Users\\YOUR-USERNAME\\.babun\\cygwin\\bin\\bash.exe 参考 GIT BASH IN INTELLIJ IDEA 13 ON WINDOWSUsing Cygwin’s bash terminal in a JetBrains IDE","categories":[],"tags":[{"name":"others","slug":"others","permalink":"http://aizigao.xyz/tags/others/"}]},{"title":" 非gif/video,用纯css3的做的动态背景图","slug":"非gif-video-用纯css3的做的动态背景图","date":"2017-03-08T01:37:11.000Z","updated":"2023-08-18T02:07:53.825Z","comments":true,"path":"2017/03/08/非gif-video-用纯css3的做的动态背景图/","link":"","permalink":"http://aizigao.xyz/2017/03/08/%E9%9D%9Egif-video-%E7%94%A8%E7%BA%AFcss3%E7%9A%84%E5%81%9A%E7%9A%84%E5%8A%A8%E6%80%81%E8%83%8C%E6%99%AF%E5%9B%BE/","excerpt":"","text":"本博客持续修改与更新中，点击这里查看最新的内容 背景 昨天迋reddit，在黑苹果版块上的导航背景图的非常有意思，乍一看还以为是gif或者是一个很小的video，审查后发现并不是，而是用的jpg和一张半透的png实现的。 上图的云会动，图片太大，就不上gif了。。。 😎😎 实现代码点些运行我的在线实例 html: 123456789101112&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot;&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&#x27;header&#x27;&gt;&lt;/div&gt; &lt;/body&gt;&lt;/html&gt; css 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354/* Styles go here */#header &#123; background: #000 url(//b.thumbs.redditmedia.com/AJsfKOOEw8Reo0o1DEb6XtdZcXXd6LseXWubRUS_D_M.jpg) center; height: 300px; border-bottom: 1px solid #7D7C7D; background-color: #FFF; overflow: hidden;&#125;#header::after&#123; pointer-events: none; content: &quot; &quot;; display: block; width: 1713px; height: 300px; position: absolute; top: 19px; opacity: 1; -webkit-transition-property: opactiy; transition-property: opactiy; -webkit-transition-duration: 5s; transition-duration: 5s; background-image: url(//b.thumbs.redditmedia.com/JOJvVsBp3R_xQx5IgkRfacpQRMBFju3HroJHC0PrZMA.png); -webkit-animation: cloudAnim 35s linear infinite; animation: cloudAnim 35s linear infinite;&#125;@-webkit-keyframes cloudAnim &#123; from &#123; -webkit-transform: translateX(-1713px) translateZ(-1713px); transform: translateX(-1713px) translateZ(-1713px) &#125; to &#123; -webkit-transform: translateX(1713px) translateZ(-1713px); transform: translateX(1713px) translateZ(-1713px) &#125;&#125;@keyframes cloudAnim &#123; from &#123; -webkit-transform: translateX(-1713px) translateZ(-1713px); -ms-transform: translateX(-1713px) translateZ(-1713px); transform: translateX(-1713px) translateZ(-1713px) &#125; to &#123; -webkit-transform: translateX(1713px) translateZ(-1713px); -ms-transform: translateX(1713px) translateZ(-1713px); transform: translateX(1713px) translateZ(-1713px) &#125;&#125;","categories":[],"tags":[{"name":"css3","slug":"css3","permalink":"http://aizigao.xyz/tags/css3/"}]},{"title":"黑苹果10.12.* voodooPS2Controller 改caps为ctrl","slug":"黑苹果10-12-voodooPS2Controller-改caps为ctrl","date":"2017-03-07T04:58:48.000Z","updated":"2023-08-18T02:07:53.850Z","comments":true,"path":"2017/03/07/黑苹果10-12-voodooPS2Controller-改caps为ctrl/","link":"","permalink":"http://aizigao.xyz/2017/03/07/%E9%BB%91%E8%8B%B9%E6%9E%9C10-12-voodooPS2Controller-%E6%94%B9caps%E4%B8%BActrl/","excerpt":"","text":"本博客持续修改与更新中，点击这里查看最新的内容 背景黑苹果也就是hackintosh常用的键盘驱动不能在偏好设置直接将caps改为control，会有bug。RehabMan本人说也不会去修改这个问题。 操作RehabMan说可以用 plguin 下info.plist 进行ADB映射去解决这个问题😎，步骤如下 进入路径 1$ cd VoodooPS2Controller.kext/Contents/PlugIns/VoodooPS2Keyboard.kext/Contents/ç 修改 Info.plist, 我这里用的编译器是vim。 1vim Info.plist 找到 IOKitPersonalities-&gt;ApplePS2Keyboard-&gt;Platform Profile-&gt;Default-&gt;Custom PS2 Map/Custom ADB Map这段 1234567891011121314 &lt;array&gt; &lt;string&gt;;Items must be strings in the form of breaklessscan (in hex)&lt;/string&gt; &lt;/array&gt; &lt;key&gt;Custom ADB Map&lt;/key&gt; &lt;array&gt; &lt;string&gt;;Items must be strings in the form of scanfrom=adbto (in hex)&lt;/string&gt; &lt;string&gt;3a=3b;caps to left ctrl&lt;/string&gt; &lt;/array&gt; &lt;key&gt;Custom PS2 Map&lt;/key&gt;&lt;array&gt;&lt;string&gt;;Items must be strings in the form of scanfrom=scanto (in hex)&lt;/string&gt;&lt;string&gt;e027=0;disable discrete fnkeys toggle&lt;/string&gt; &lt;string&gt;e028=0;disable discrete trackpad toggle&lt;/string&gt; &lt;/array&gt; 上面重点是添加了： 1&lt;string&gt;3a=3b;caps to left ctrl&lt;/string&gt; ​ 后记 你也可以将 caps改成esc之类的，这里提供下我的参考资源，如有其它的定制需求，你可以参照下面的贴子 github 如何使用自定义的按键映射功能 如何使用自定义的按键影射功能","categories":[],"tags":[{"name":"others","slug":"others","permalink":"http://aizigao.xyz/tags/others/"}]},{"title":"网络工程师思维导图分享","slug":"网络工程师思维导图分享","date":"2017-03-02T01:46:13.000Z","updated":"2023-08-18T02:07:53.721Z","comments":true,"path":"2017/03/02/网络工程师思维导图分享/","link":"","permalink":"http://aizigao.xyz/2017/03/02/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE%E5%88%86%E4%BA%AB/","excerpt":"","text":"本博客持续修改与更新中，点击这里查看最新的内容[TOC] 前言这是小弟我13年考证用的笔记，分享一下，说不定有人喜欢呢:smile::smile: 思维导图的软件用的是 imindmap 在博客·结尾我会放出百度网盘的链接 导图在这里计算机网络: 物理层 数据链路层 TCP UDP 应用层 以太网 交换 路由器 硬件 存储技术 网络规划与设计 常用网络协议图 分享链接 导图 密码: rqgr 学习视频 密码： bvs9","categories":[],"tags":[{"name":"others","slug":"others","permalink":"http://aizigao.xyz/tags/others/"}]},{"title":"使用AHK减少鼠标和方向键的使用频率,高效编辑","slug":"使用AHK减少鼠标和方向键的使用频率-高效编辑","date":"2017-03-01T07:15:53.000Z","updated":"2023-08-18T02:07:53.270Z","comments":true,"path":"2017/03/01/使用AHK减少鼠标和方向键的使用频率-高效编辑/","link":"","permalink":"http://aizigao.xyz/2017/03/01/%E4%BD%BF%E7%94%A8AHK%E5%87%8F%E5%B0%91%E9%BC%A0%E6%A0%87%E5%92%8C%E6%96%B9%E5%90%91%E9%94%AE%E7%9A%84%E4%BD%BF%E7%94%A8%E9%A2%91%E7%8E%87-%E9%AB%98%E6%95%88%E7%BC%96%E8%BE%91/","excerpt":"","text":"本博客持续修改与更新中，点击这里 查看最新的内容 [TOC] autohotkey是一款热键脚本语言，网上相关的介绍很多，我这不多介绍。一般敲多的码的人，对方向键、键盘和鼠标之间来回移动都会觉的是一件很麻烦的事，使用vim的除外，所以我这在这里介绍使autohot实现鼠标与方向键的功能。 一般来说平时capslock键和scrllLock 这两个键使用的频率非常低，我们可以将caplock设为和ctl、alt、win一样的功能键，但是使用capslock这个设置会有出现大小写切换的问题，使用ahk这个软件来换键并不是一个好的解决方案，所以我还要用到另一个改键软件 KeyTweak。KeyTweakn改键原理是修改注册表，比ahk更为彻底，我将caplock和scrllLock相换一下，以后大小切换就是scrllLock了（我平时都是按shift的）。 下面开始在ahk中编辑。 鼠标功能12这部分代码来自http://www.ahk8.com/，年代久远原作者记记是谁了。。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115SetScrollLockState, AlwaysOff;禁用SetScrollLockState#SingleInstancecount = 0JoyMultiplier = 0.20JoyThreshold = 3JoyThresholdUpper := 50 + JoyThresholdJoyThresholdLower := 50 - JoyThresholdYAxisMultiplier = -1SetTimer, WatchKeyboard, 10Hotkey, F1, ButtonLeft ;F1模拟左键Hotkey, F2, ButtonRight;F2模拟右键Hotkey, up, emptyHotkey, down, emptyHotkey, left, emptyHotkey, right, emptyReturnScrollLock &amp; F1:: ;开启鼠标功能SetTimer, WatchKeyboard, 10Hotkey, F1, OnHotkey, F2, OnHotkey, up, OnHotkey, down, OnHotkey, left, OnHotkey, right, OnReturnScrollLock &amp; F2::;关闭鼠标功能SetTimer, WatchKeyboard, OffHotkey, F1, OffHotkey, F2, OffHotkey, up, OffHotkey, down, OffHotkey, left, OffHotkey, right, OffReturnempty:ReturnWatchKeyboard:MouseNeedsToBeMoved := false ; Set default.JoyMultiplier+=0.01SetFormat, float, 03up:=GetKeyState(&quot;Up&quot;,&quot;p&quot;)down:=GetKeyState(&quot;Down&quot;,&quot;p&quot;)Left:=GetKeyState(&quot;Left&quot;,&quot;p&quot;)right:=GetKeyState(&quot;Right&quot;,&quot;p&quot;)if(Right)&#123; MouseNeedsToBeMoved := true DeltaX := 10&#125;else if(Left)&#123; MouseNeedsToBeMoved := true DeltaX := -10&#125;else DeltaX = 0if (up)&#123; MouseNeedsToBeMoved := true DeltaY := 10&#125;else if (Down)&#123; MouseNeedsToBeMoved := true DeltaY := -10&#125;else DeltaY = 0if MouseNeedsToBeMoved&#123; SetMouseDelay, -1 ; Makes movement smoother. MouseMove, DeltaX * JoyMultiplier, DeltaY * JoyMultiplier * YAxisMultiplier, 0, R&#125;Elsecount++If(count&gt;20)&#123;JoyMultiplier = 0.30count=0&#125;returnButtonLeft:SetMouseDelay, -1 ; Makes movement smoother.MouseClick, left,,, 1, 0, D ; Hold down the left mouse button.SetTimer, WaitForLeftButtonUp, 10returnButtonRight:SetMouseDelay, -1 ; Makes movement smoother.MouseClick, right,,, 1, 0, D ; Hold down the right mouse button.SetTimer, WaitForRightButtonUp, 10returnWaitForLeftButtonUp:;使用支持鼠标手势if GetKeyState(&quot;F1&quot;) return ; The button is still, down, so keep waiting.; Otherwise, the button has been released.SetTimer, WaitForLeftButtonUp, offSetMouseDelay, -1 ; Makes movement smoother.MouseClick, left,,, 1, 0, U ; Release the mouse button.returnWaitForRightButtonUp:if GetKeyState(&quot;F2&quot;) return ; The button is still, down, so keep waiting.; Otherwise, the button has been released.SetTimer, WaitForRightButtonUp, offMouseClick, right,,, 1, 0, U ; Release the mouse button.return;;endmouse 方向键与其它光标的功能：按我的设置上下左右分别为caps+i&#x2F;j&#x2F;k&#x2F;l&#x2F;j;home,end,delete，pgup,pgdn为caps+h&#x2F;n&#x2F;o&#x2F;[&#x2F;]; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859;scroll事件ScrollLock &amp; [::send,&#123;WheelUp&#125;ScrollLock &amp; ]::send,&#123;WheelDown&#125;; move leftScrollLock &amp; j::if GetKeyState(&quot;LShift&quot;, &quot;P&quot;) send, +&#123;Left&#125;else if GetKeyState(&quot;LAlt&quot;, &quot;P&quot;) send,^&#123;left&#125;else send, &#123;Left&#125;Return; move rightScrollLock &amp; l::if GetKeyState(&quot;LShift&quot;, &quot;P&quot;) send, +&#123;right&#125;else if GetKeyState(&quot;LAlt&quot;, &quot;P&quot;) send,^&#123;right&#125;else send, &#123;right&#125;Return; move upScrollLock &amp; i::if GetKeyState(&quot;LShift&quot;, &quot;P&quot;) send, +&#123;up&#125;else if GetKeyState(&quot;LAlt&quot;, &quot;P&quot;) send,^!&#123;up&#125;else if GetKeyState(&quot;LControl&quot;, &quot;P&quot;) send,^+&#123;up&#125;else send, &#123;up&#125;Return; move downScrollLock &amp; k::if GetKeyState(&quot;LShift&quot;, &quot;P&quot;) send, +&#123;down&#125;else if GetKeyState(&quot;LAlt&quot;, &quot;P&quot;) send,^!&#123;down&#125;else if GetKeyState(&quot;LControl&quot;, &quot;P&quot;) send,^+&#123;down&#125;else send, &#123;down&#125;Return;homeScrollLock &amp; h::if GetKeyState(&quot;LShift&quot;, &quot;P&quot;) send, +&#123;home&#125;else send, &#123;home&#125;Return; endScrollLock &amp; n::if GetKeyState(&quot;LShift&quot;, &quot;P&quot;) send, +&#123;end&#125;else send, &#123;end&#125;Return;delelteScrollLock &amp; o::send,&#123;delete&#125; 拾色器利用ahk设置的拾色器非常方便，这里设置的快揵是alt+win+c 123456789!#c:: MouseGetPos, mouseX, mouseY PixelGetColor, color, %mouseX%, %mouseY%, RGB StringRight color,color,6 clipboard = #%color% tooltip,color is %color% sleep 2000 tooltip,return123456789123456789 剪切板系统自带的剪切板只能一起复制与粘贴，下面的剪切板支持最多30次copy，热键如下： ;win+0：清空 ; ctrl+c：复制 ; win+v：依次粘贴 ; win+]：依次粘贴，但顺序相反 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167handleClip(action)&#123;global static AddNextNumglobal static GetNextNumglobal static HighestNumglobal static getprevnumglobal static highest1global static ClipArrayglobal static ClipArray1global static ClipArray2global static ClipArray3global static ClipArray4global static ClipArray5global static ClipArray6global static ClipArray7global static ClipArray8global static ClipArray9global static ClipArray10global static ClipArray11global static ClipArray12global static ClipArray13global static ClipArray14global static ClipArray15global static ClipArray16global static ClipArray17global static ClipArray18global static ClipArray19global static ClipArray20global static ClipArray21global static ClipArray22global static ClipArray23global static ClipArray24global static ClipArray25global static ClipArray26global static ClipArray27global static ClipArray28global static ClipArray29global static ClipArray30if (action = &quot;save&quot;)&#123;if (AddNextNum &lt; 30)&#123;AddNextNum += 1 ;&#125;else&#123;AddNextNum := 1 ;&#125;if (HighestNum &lt; 30)&#123;HighestNum += 1 ;&#125;GetNextNum := AddNextNum ;ClipArray%AddNextNum% := Clipboardhighest1 := highestnum + 1getprevnum := 1&#125;else if ((action = &quot;get&quot;) OR (action = &quot;roll&quot;))&#123;if (GetNextNum != 0)&#123;if (action = &quot;roll&quot;)&#123;Send, ^z&#125;Clipboard := ClipArray%GetNextNum%if (GetNextNum &gt; 1)&#123;GetNextNum -= 1 ;getprevnum++&#125;else&#123;getprevnum := 1GetNextNum := HighestNum&#125;Send, ^v&#125;&#125;else if (action = &quot;get-reverse&quot;)&#123;if (GetNextNum != 0)&#123;Clipboard := ClipArray%getprevnum%if (GetNextNum &gt; 1)&#123;GetNextNum -= 1 ;getprevnum++&#125;else&#123;getprevnum := 1GetNextNum := HighestNum&#125;Send, ^v&#125;&#125;else if (action = &quot;rollforward&quot;)&#123;if (GetNextNum != 0)&#123;Send, ^zif (GetNextNum &lt; HighestNum)&#123;GetNextNum += 1 ;&#125;else&#123;GetNextNum := 1&#125;Clipboard := ClipArray%GetNextNum%Send, ^v&#125;&#125;else if (action = &quot;clear&quot;)&#123;GetNextNum := 0AddNextNum := 0HighestNum := 0getprevnum := 0&#125;&#125;#0::handleClip(&quot;clear&quot;)return^c::suspend onSend, ^csuspend offhandleClip(&quot;save&quot;)return#v:: handleClip(&quot;get-reverse&quot;)return#]:: handleClip(&quot;get&quot;)return; #\\::; handleClip(&quot;roll&quot;); ToolTip,; sleep 2000; tooltip,; return#/:: clipboard =return#^\\:: handleClip(&quot;rollforward&quot;)return; end 剪切板","categories":[],"tags":[{"name":"tools","slug":"tools","permalink":"http://aizigao.xyz/tags/tools/"}]},{"title":"css3实现固定表格头部而无需设置单元格td的宽度","slug":"css3实现固定表格头部而无需设置单元格td的宽度","date":"2017-02-24T08:27:03.000Z","updated":"2023-08-18T02:07:53.083Z","comments":true,"path":"2017/02/24/css3实现固定表格头部而无需设置单元格td的宽度/","link":"","permalink":"http://aizigao.xyz/2017/02/24/css3%E5%AE%9E%E7%8E%B0%E5%9B%BA%E5%AE%9A%E8%A1%A8%E6%A0%BC%E5%A4%B4%E9%83%A8%E8%80%8C%E6%97%A0%E9%9C%80%E8%AE%BE%E7%BD%AE%E5%8D%95%E5%85%83%E6%A0%BCtd%E7%9A%84%E5%AE%BD%E5%BA%A6/","excerpt":"","text":"本博客持续修改与更新中，点击这里查看最新的内容[TOC] 背景最近小弟在工作都是做后台系统，一堆的表格，各种各样的。然后需求上要有固定的表头的表格，如下图所示 在网上查询固定表头的实现方式为： thead 设置为 fixed 拆分表格为两个表格 thead一个，tbody一个 ​然而上面的实现上有个条件是**要提前设置单元格的大小 **， 如果没有设置对的会就是下面这个样子（下面是其它的博主的例子图， 我盗用下 :smirk: ） ​:expressionless::expressionless::expressionless::expressionless: 我可不要固定单元格宽度，固定的宽度怎么做组作啊。。。 在css3中的transform不会改变原来元素的大小位置，相当于是复制了份出来，然后transform的计算速也够快（这里婊一下absolute加left ，top，经常慢半拍）。用这个做这个功能非常合适，还要加点js用于监听滚轮。 实现方式运行我写的 在线例子 打不开，请使用科学上网*:smirk::smirk::smirk: 下面贴下代码 js: 12345678910111213141516// Code goes here&#x27;use strict&#x27;window.onload = function()&#123; var tableCont = document.querySelector(&#x27;#table-cont&#x27;) /** * scroll handle * @param &#123;event&#125; e -- scroll event */ function scrollHandle (e)&#123; console.log(this) var scrollTop = this.scrollTop; this.querySelector(&#x27;thead&#x27;).style.transform = &#x27;translateY(&#x27; + scrollTop + &#x27;px)&#x27;; &#125; tableCont.addEventListener(&#x27;scroll&#x27;,scrollHandle)&#125; css: 123456789101112131415/* Styles go here */.table-cont&#123; /**make table can scroll**/ max-height: 200px; overflow: auto; /** add some style**/ /*padding: 2px;*/ background: #ddd; margin: 20px 10px; box-shadow: 0 0 1px 3px #ddd;&#125;thead&#123; background-color: #ddd;&#125; html： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;link data-require=&quot;bootstrap@*&quot; data-semver=&quot;3.3.7&quot; rel=&quot;stylesheet&quot; href=&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css&quot; /&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot; /&gt; &lt;script src=&quot;script.js&quot;&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=&#x27;table-cont&#x27; id=&#x27;table-cont&#x27;&gt;&lt;!--看这里--&gt; &lt;table class=&quot;table table-striped&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;#&lt;/th&gt; &lt;th&gt;First Name&lt;/th&gt; &lt;th&gt;Last Name&lt;/th&gt; &lt;th&gt;Username&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;th scope=&quot;row&quot;&gt;1&lt;/th&gt; &lt;td&gt;Mark&lt;/td&gt; &lt;td&gt;Otto&lt;/td&gt; &lt;td&gt;@mdo&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th scope=&quot;row&quot;&gt;2&lt;/th&gt; &lt;td&gt;Jacob&lt;/td&gt; &lt;td&gt;Thornton&lt;/td&gt; &lt;td&gt;@fat&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th scope=&quot;row&quot;&gt;3&lt;/th&gt; &lt;td&gt;Larry&lt;/td&gt; &lt;td&gt;the Bird&lt;/td&gt; &lt;td&gt;@twitter&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th scope=&quot;row&quot;&gt;3&lt;/th&gt; &lt;td&gt;Larry&lt;/td&gt; &lt;td&gt;the Bird&lt;/td&gt; &lt;td&gt;@twitter&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th scope=&quot;row&quot;&gt;3&lt;/th&gt; &lt;td&gt;Larry&lt;/td&gt; &lt;td&gt;the Bird&lt;/td&gt; &lt;td&gt;@twitter&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th scope=&quot;row&quot;&gt;3&lt;/th&gt; &lt;td&gt;Larry&lt;/td&gt; &lt;td&gt;the Bird&lt;/td&gt; &lt;td&gt;@twitter&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th scope=&quot;row&quot;&gt;3&lt;/th&gt; &lt;td&gt;Larry&lt;/td&gt; &lt;td&gt;the Bird&lt;/td&gt; &lt;td&gt;@twitter&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th scope=&quot;row&quot;&gt;3&lt;/th&gt; &lt;td&gt;Larry&lt;/td&gt; &lt;td&gt;the Bird&lt;/td&gt; &lt;td&gt;@twitter&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th scope=&quot;row&quot;&gt;3&lt;/th&gt; &lt;td&gt;Larry&lt;/td&gt; &lt;td&gt;the Bird&lt;/td&gt; &lt;td&gt;@twitter&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th scope=&quot;row&quot;&gt;3&lt;/th&gt; &lt;td&gt;Larry&lt;/td&gt; &lt;td&gt;the Bird&lt;/td&gt; &lt;td&gt;@twitter&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th scope=&quot;row&quot;&gt;3&lt;/th&gt; &lt;td&gt;Larry&lt;/td&gt; &lt;td&gt;the Bird&lt;/td&gt; &lt;td&gt;@twitter&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th scope=&quot;row&quot;&gt;3&lt;/th&gt; &lt;td&gt;Larry&lt;/td&gt; &lt;td&gt;the Bird&lt;/td&gt; &lt;td&gt;@twitter&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th scope=&quot;row&quot;&gt;3&lt;/th&gt; &lt;td&gt;Larry&lt;/td&gt; &lt;td&gt;the Bird&lt;/td&gt; &lt;td&gt;@twitter&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 搞定,美滋滋:thumbsup::thumbsup::thumbsup:","categories":[],"tags":[{"name":"css3","slug":"css3","permalink":"http://aizigao.xyz/tags/css3/"}]},{"title":"测试文件","slug":"测试文件","date":"2017-01-24T08:25:13.000Z","updated":"2023-08-18T02:07:53.479Z","comments":true,"path":"2017/01/24/测试文件/","link":"","permalink":"http://aizigao.xyz/2017/01/24/%E6%B5%8B%E8%AF%95%E6%96%87%E4%BB%B6/","excerpt":"","text":"#这是我的第一个博客 先写个 1234function helloWorld ()&#123; console.log(&#x27;hello world&#x27;);&#125;helloWord(); blod :bowtie::smile::simple_smile::laughing::blush::smiley::relaxed::smirk::heart_eyes::kissing_heart::kissing_closed_eyes::flushed::relieved::satisfied::grin::wink::stuck_out_tongue_winking_eye::stuck_out_tongue_closed_eyes::grinning::kissing::kissing_smiling_eyes::stuck_out_tongue::sleeping::worried::frowning::anguished::open_mouth::grimacing::confused::hushed::expressionless::unamused::sweat_smile::sweat::disappointed_relieved::weary::pensive::disappointed::confounded::fearful::cold_sweat::persevere::cry::sob::joy::astonished::scream::neckbeard::tired_face::angry::rage::triumph::sleepy::yum::mask::sunglasses::dizzy_face::imp::smiling_imp::neutral_face::no_mouth::innocent::alien::yellow_heart::blue_heart::purple_heart::heart::green_heart::broken_heart::heartbeat::heartpulse::two_hearts::revolving_hearts::cupid::sparkling_heart::sparkles::star::star2::dizzy::boom::collision::anger::exclamation::question::grey_exclamation::grey_question::zzz::dash::sweat_drops::notes::musical_note::fire::hankey::poop::shit::+1::thumbsup::-1::thumbsdown::ok_hand::punch::facepunch::fist::v::wave::hand::raised_hand::open_hands::point_up::point_down::point_left::point_right::raised_hands::pray::point_up_2::clap::muscle::metal::fu::runner::running::couple::family::two_men_holding_hands::two_women_holding_hands::dancer::dancers::ok_woman::no_good::information_desk_person::raising_hand::bride_with_veil::person_with_pouting_face::person_frowning::bow::couplekiss::couple_with_heart::massage::haircut::nail_care::boy::girl::woman::man::baby::older_woman::older_man::person_with_blond_hair::man_with_gua_pi_mao::man_with_turban::construction_worker::cop::angel::princess::smiley_cat::smile_cat::heart_eyes_cat::kissing_cat::smirk_cat::scream_cat::crying_cat_face::joy_cat::pouting_cat::japanese_ogre::japanese_goblin::see_no_evil::hear_no_evil::speak_no_evil::guardsman::skull::feet::lips::kiss::droplet::ear::eyes::nose::tongue::love_letter::bust_in_silhouette::busts_in_silhouette::speech_balloon::thought_balloon::feelsgood::finnadie::goberserk::godmode::hurtrealbad::rage1::rage2::rage3::rage4::suspect::trollface:Nature :sunny::umbrella::cloud::snowflake::snowman::zap::cyclone::foggy::ocean::cat::dog::mouse::hamster::rabbit::wolf::frog::tiger::koala::bear::pig::pig_nose::cow::boar::monkey_face::monkey::horse::racehorse::camel::sheep::elephant::panda_face::snake::bird::baby_chick::hatched_chick::hatching_chick::chicken::penguin::turtle::bug::honeybee::ant::beetle::snail::octopus::tropical_fish::fish::whale::whale2::dolphin::cow2::ram::rat::water_buffalo::tiger2::rabbit2::dragon::goat::rooster::dog2::pig2::mouse2::ox::dragon_face::blowfish::crocodile::dromedary_camel::leopard::cat2::poodle::paw_prints::bouquet::cherry_blossom::tulip::four_leaf_clover::rose::sunflower::hibiscus::maple_leaf::leaves::fallen_leaf::herb::mushroom::cactus::palm_tree::evergreen_tree::deciduous_tree::chestnut::seedling::blossom::ear_of_rice::shell::globe_with_meridians::sun_with_face::full_moon_with_face::new_moon_with_face::new_moon::waxing_crescent_moon::first_quarter_moon::waxing_gibbous_moon::full_moon::waning_gibbous_moon::last_quarter_moon::waning_crescent_moon::last_quarter_moon_with_face::first_quarter_moon_with_face::crescent_moon::earth_africa::earth_americas::earth_asia::volcano::milky_way::partly_sunny::octocat::squirrel:Objects :bamboo::gift_heart::dolls::school_satchel::mortar_board::flags::fireworks::sparkler::wind_chime::rice_scene::jack_o_lantern::ghost::santa::christmas_tree::gift::bell::no_bell::tanabata_tree::tada::confetti_ball::balloon::crystal_ball::cd::dvd::floppy_disk::camera::video_camera::movie_camera::computer::tv::iphone::phone::telephone::telephone_receiver::pager::fax::minidisc::vhs::sound::speaker::mute::loudspeaker::mega::hourglass::hourglass_flowing_sand::alarm_clock::watch::radio::satellite::loop::mag::mag_right::unlock::lock::lock_with_ink_pen::closed_lock_with_key::key::bulb::flashlight::high_brightness::low_brightness::electric_plug::battery::calling::email::mailbox::postbox::bath::bathtub::shower::toilet::wrench::nut_and_bolt::hammer::seat::moneybag::yen::dollar::pound::euro::credit_card::money_with_wings::e-mail::inbox_tray::outbox_tray::envelope::incoming_envelope::postal_horn::mailbox_closed::mailbox_with_mail::mailbox_with_no_mail::package::door::smoking::bomb::gun::hocho::pill::syringe::page_facing_up::page_with_curl::bookmark_tabs::bar_chart::chart_with_upwards_trend::chart_with_downwards_trend::scroll::clipboard::calendar::date::card_index::file_folder::open_file_folder::scissors::pushpin::paperclip::black_nib::pencil2::straight_ruler::triangular_ruler::closed_book::green_book::blue_book::orange_book::notebook::notebook_with_decorative_cover::ledger::books::bookmark::name_badge::microscope::telescope::newspaper::football::basketball::soccer::baseball::tennis::8ball::rugby_football::bowling::golf::mountain_bicyclist::bicyclist::horse_racing::snowboarder::swimmer::surfer::ski::spades::hearts::clubs::diamonds::gem::ring::trophy::musical_score::musical_keyboard::violin::space_invader::video_game::black_joker::flower_playing_cards::game_die::dart::mahjong::clapper::memo::pencil::book::art::microphone::headphones::trumpet::saxophone::guitar::shoe::sandal::high_heel::lipstick::boot::shirt::tshirt::necktie::womans_clothes::dress::running_shirt_with_sash::jeans::kimono::bikini::ribbon::tophat::crown::womans_hat::mans_shoe::closed_umbrella::briefcase::handbag::pouch::purse::eyeglasses::fishing_pole_and_fish::coffee::tea::sake::baby_bottle::beer::beers::cocktail::tropical_drink::wine_glass::fork_and_knife::pizza::hamburger::fries::poultry_leg::meat_on_bone::spaghetti::curry::fried_shrimp::bento::sushi::fish_cake::rice_ball::rice_cracker::rice::ramen::stew::oden::dango::egg::bread::doughnut::custard::icecream::ice_cream::shaved_ice::birthday::cake::cookie::chocolate_bar::candy::lollipop::honey_pot::apple::green_apple::tangerine::lemon::cherries::grapes::watermelon::strawberry::peach::melon::banana::pear::pineapple::sweet_potato::eggplant::tomato::corn:Places :house::house_with_garden::school::office::post_office::hospital::bank::convenience_store::love_hotel::hotel::wedding::church::department_store::european_post_office::city_sunrise::city_sunset::japanese_castle::european_castle::tent::factory::tokyo_tower::japan::mount_fuji::sunrise_over_mountains::sunrise::stars::statue_of_liberty::bridge_at_night::carousel_horse::rainbow::ferris_wheel::fountain::roller_coaster::ship::speedboat::boat::sailboat::rowboat::anchor::rocket::airplane::helicopter::steam_locomotive::tram::mountain_railway::bike::aerial_tramway::suspension_railway::mountain_cableway::tractor::blue_car::oncoming_automobile::car::red_car::taxi::oncoming_taxi::articulated_lorry::bus::oncoming_bus::rotating_light::police_car::oncoming_police_car::fire_engine::ambulance::minibus::truck::train::station::train2::bullettrain_front::bullettrain_side::light_rail::monorail::railway_car::trolleybus::ticket::fuelpump::vertical_traffic_light::traffic_light::warning::construction::beginner::atm::slot_machine::busstop::barber::hotsprings::checkered_flag::crossed_flags::izakaya_lantern::moyai::circus_tent::performing_arts::round_pushpin::triangular_flag_on_post::jp::kr::cn::us::fr::es::it::ru::gb::uk::de:Symbols :one::two::three::four::five::six::seven::eight::nine::keycap_ten::1234::zero::hash::symbols::arrow_backward::arrow_down::arrow_forward::arrow_left::capital_abcd::abcd::abc::arrow_lower_left::arrow_lower_right::arrow_right::arrow_up::arrow_upper_left::arrow_upper_right::arrow_double_down::arrow_double_up::arrow_down_small::arrow_heading_down::arrow_heading_up::leftwards_arrow_with_hook::arrow_right_hook::left_right_arrow::arrow_up_down::arrow_up_small::arrows_clockwise::arrows_counterclockwise::rewind::fast_forward::information_source::ok::twisted_rightwards_arrows::repeat::repeat_one::new::top::up::cool::free::ng::cinema::koko::signal_strength::u5272::u5408::u55b6::u6307::u6708::u6709::u6e80::u7121::u7533::u7a7a::u7981::sa::restroom::mens::womens::baby_symbol::no_smoking::parking::wheelchair::metro::baggage_claim::accept::wc::potable_water::put_litter_in_its_place::secret::congratulations::m::passport_control::left_luggage::customs::ideograph_advantage::cl::sos::id::no_entry_sign::underage::no_mobile_phones::do_not_litter::non-potable_water::no_bicycles::no_pedestrians::children_crossing::no_entry::eight_spoked_asterisk::sparkle::eight_pointed_black_star::heart_decoration::vs::vibration_mode::mobile_phone_off::chart::currency_exchange::aries::taurus::gemini::cancer::leo::virgo::libra::scorpius::sagittarius::capricorn::aquarius::pisces::ophiuchus::six_pointed_star::negative_squared_cross_mark::a::b::ab::o2::diamond_shape_with_a_dot_inside::recycle::end::back::on::soon::clock1::clock130::clock10::clock1030::clock11::clock1130::clock12::clock1230::clock2::clock230::clock3::clock330::clock4::clock430::clock5::clock530::clock6::clock630::clock7::clock730::clock8::clock830::clock9::clock930::heavy_dollar_sign::copyright::registered::tm::x::heavy_exclamation_mark::bangbang::interrobang::o::heavy_multiplication_x::heavy_plus_sign::heavy_minus_sign::heavy_division_sign::white_flower::100::heavy_check_mark::ballot_box_with_check::radio_button::link::curly_loop::wavy_dash::part_alternation_mark::trident::black_small_square::white_small_square::black_medium_small_square::white_medium_small_square::black_medium_square::white_medium_square::black_large_square::white_large_square::white_check_mark::black_square_button::white_square_button::black_circle::white_circle::red_circle::large_blue_circle::large_blue_diamond::large_orange_diamond::small_blue_diamond::small_orange_diamond::small_red_triangle::small_red_triangle_down::shipit:Campfire also supports a few sounds ► &#x2F;play secret► &#x2F;play trombone► &#x2F;play crickets► &#x2F;play rimshot► &#x2F;play vuvuzela► &#x2F;play tmyk► &#x2F;play live► &#x2F;play drama► &#x2F;play yeah► &#x2F;play greatjob► &#x2F;play pushit► &#x2F;play nyan► &#x2F;play tada► &#x2F;play ohmy► &#x2F;play bueller► &#x2F;play ohyeah► &#x2F;play 56k► &#x2F;play dangerzone► &#x2F;play horn► &#x2F;play horror► &#x2F;play loggins► &#x2F;play yodel► &#x2F;play sax► &#x2F;play noooo► &#x2F;play heygirl► &#x2F;play inconceivable► &#x2F;play deeper► &#x2F;play whoomp► &#x2F;play clowntown► &#x2F;play what► &#x2F;play bezos► &#x2F;play trololo► &#x2F;play makeitso► &#x2F;play sexyback► &#x2F;play bell► &#x2F;play danielsan► &#x2F;play greyjoy► &#x2F;play story► &#x2F;play dadgummit► &#x2F;play rollout► &#x2F;play cottoneyejoe► &#x2F;play rumble► &#x2F;play guarantee► &#x2F;play unix► &#x2F;play letitgo► &#x2F;play wups► &#x2F;play flawless► &#x2F;play butts","categories":[],"tags":[{"name":"test","slug":"test","permalink":"http://aizigao.xyz/tags/test/"}]}],"categories":[],"tags":[{"name":"脚本","slug":"脚本","permalink":"http://aizigao.xyz/tags/%E8%84%9A%E6%9C%AC/"},{"name":"python","slug":"python","permalink":"http://aizigao.xyz/tags/python/"},{"name":"js","slug":"js","permalink":"http://aizigao.xyz/tags/js/"},{"name":"css","slug":"css","permalink":"http://aizigao.xyz/tags/css/"},{"name":"动画","slug":"动画","permalink":"http://aizigao.xyz/tags/%E5%8A%A8%E7%94%BB/"},{"name":"个人笔记","slug":"个人笔记","permalink":"http://aizigao.xyz/tags/%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/"},{"name":"nginx","slug":"nginx","permalink":"http://aizigao.xyz/tags/nginx/"},{"name":"小程序","slug":"小程序","permalink":"http://aizigao.xyz/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"},{"name":"英语","slug":"英语","permalink":"http://aizigao.xyz/tags/%E8%8B%B1%E8%AF%AD/"},{"name":"linux","slug":"linux","permalink":"http://aizigao.xyz/tags/linux/"},{"name":"记录，笔记, 读后","slug":"记录，笔记-读后","permalink":"http://aizigao.xyz/tags/%E8%AE%B0%E5%BD%95%EF%BC%8C%E7%AC%94%E8%AE%B0-%E8%AF%BB%E5%90%8E/"},{"name":"个人吐槽","slug":"个人吐槽","permalink":"http://aizigao.xyz/tags/%E4%B8%AA%E4%BA%BA%E5%90%90%E6%A7%BD/"},{"name":"frontend oss 图像处理","slug":"frontend-oss-图像处理","permalink":"http://aizigao.xyz/tags/frontend-oss-%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"},{"name":"others","slug":"others","permalink":"http://aizigao.xyz/tags/others/"},{"name":"css3","slug":"css3","permalink":"http://aizigao.xyz/tags/css3/"},{"name":"tools","slug":"tools","permalink":"http://aizigao.xyz/tags/tools/"},{"name":"test","slug":"test","permalink":"http://aizigao.xyz/tags/test/"}]}